default namespace = "http://www.tei-c.org/ns/Examples"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ge = "http://www.tei-c.org/ns/geneticEditions"
namespace math = "http://www.w3.org/1998/Math/MathML"
namespace ns1 = "http://www.tei-c.org/ns/1.0"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace svg = "http://www.w3.org/2000/svg"
namespace xi = "http://www.w3.org/2001/XInclude"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2011-11-29T14:08:50Z. 
# Edition: 1.9.0. Last updated on February 25th 2011.
# Edition Location: http://www.tei-c.org/Vault/P5/1.9.0/
#

# This work is copyright Trevor Mu√±oz and Maryland Institute for Technology in the
#   Humanities and licensed under a Creative Commons Attribution 3.0
#     Unported License.
sga_macro.paraContent =
  (text
   | sga_model.gLike
   | sga_model.phrase
   | sga_model.inter
   | sga_model.global)*
sga_macro.limitedContent =
  (text | sga_model.limitedPhrase | sga_model.inter)*
sga_macro.phraseSeq =
  (text | sga_model.gLike | sga_model.phrase | sga_model.global)*
sga_macro.phraseSeq.limited =
  (text | sga_model.limitedPhrase | sga_model.global)*
sga_macro.specialPara =
  (text
   | sga_model.gLike
   | sga_model.phrase
   | sga_model.inter
   | sga_model.divPart
   | sga_model.global)*
sga_macro.xtext = (text | sga_model.gLike)*
sga_data.certainty = "high" | "medium" | "low" | "unknown"
sga_data.numeric =
  xsd:double
  | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
  | xsd:decimal
sga_data.count = xsd:nonNegativeInteger
sga_data.temporal.w3c =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
sga_data.truthValue = xsd:boolean
sga_data.xTruthValue = xsd:boolean | "unknown" | "inapplicable"
sga_data.language = xsd:language
sga_data.namespace = xsd:anyURI
sga_data.outputMeasurement =
  xsd:token {
    pattern =
      "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
  }
sga_data.pattern = xsd:token
sga_data.pointer = xsd:anyURI
sga_data.version = xsd:token { pattern = "[\d]+(\.[\d]+){0,2}" }
sga_data.key = xsd:string
sga_data.word = xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
sga_data.code = xsd:anyURI
sga_data.name = xsd:Name
sga_data.enumerated = sga_data.name
sga_macro.anyXML =
  element * - (ns1:* | egXML) {
    attribute * { text }*,
    (text | sga_macro.anyXML)*
  }
sga_att.ascribed.attributes = sga_att.ascribed.attribute.who
sga_att.ascribed.attribute.who =
  
  ## indicates the person, or group of people, to whom the element content is ascribed.
  attribute who {
    list { sga_data.pointer, sga_data.pointer* }
  }?
sga_att.canonical.attributes =
  sga_att.canonical.attribute.key, sga_att.canonical.attribute.ref
sga_att.canonical.attribute.key =
  
  ## provides an externally-defined means of identifying the entity (or entities) being
  ##         named, using a coded value of some kind.
  attribute key { sga_data.key }?
sga_att.canonical.attribute.ref =
  
  ## (reference) provides an explicit means of locating a full definition for the entity being named by
  ##         means of one or more URIs.
  attribute ref {
    list { sga_data.pointer, sga_data.pointer* }
  }?
sga_att.ranging.attributes =
  sga_att.ranging.attribute.atLeast,
  sga_att.ranging.attribute.atMost,
  sga_att.ranging.attribute.min,
  sga_att.ranging.attribute.max
sga_att.ranging.attribute.atLeast =
  
  ## gives a minimum estimated value for the approximate measurement.
  attribute atLeast { sga_data.numeric }?
sga_att.ranging.attribute.atMost =
  
  ## gives a maximum estimated value for the approximate measurement.
  attribute atMost { sga_data.numeric }?
sga_att.ranging.attribute.min =
  
  ## where the measurement summarizes more than one observation
  ##       or a range, supplies the minimum value
  ##         observed.
  attribute min { sga_data.numeric }?
sga_att.ranging.attribute.max =
  
  ## where the measurement summarizes more than one observation
  ##       or a range, supplies the maximum value
  ##       observed.
  attribute max { sga_data.numeric }?
sga_att.dimensions.attributes =
  sga_att.ranging.attributes,
  sga_att.dimensions.attribute.unit,
  sga_att.dimensions.attribute.quantity,
  sga_att.dimensions.attribute.extent,
  sga_att.dimensions.attribute.precision,
  sga_att.dimensions.attribute.scope
sga_att.dimensions.attribute.unit =
  
  ## names the unit used for the measurement
  ## Suggested values include: 1] cm(centimetres) ; 2] mm(millimetres) ; 3] in(inches) ; 4] lines; 5] chars(characters) 
  attribute unit {
    
    ## (centimetres) 
    "cm"
    | 
      ## (millimetres) 
      "mm"
    | 
      ## (inches) 
      "in"
    | 
      ## lines of text
      "lines"
    | 
      ## (characters) characters of text
      "chars"
    | xsd:Name
  }?
sga_att.dimensions.attribute.quantity =
  
  ## specifies the length in the units specified
  attribute quantity { sga_data.numeric }?
sga_att.dimensions.attribute.extent =
  
  ## indicates the size of the object concerned using a project-specific vocabulary combining
  ##         quantity and units in a single string of words. 
  attribute extent {
    list { sga_data.word, sga_data.word* }
  }?
sga_att.dimensions.attribute.precision =
  
  ## characterizes the precision of the values specified by the other attributes.
  attribute precision { sga_data.certainty }?
sga_att.dimensions.attribute.scope =
  
  ## where the measurement summarizes more than one observation, specifies the applicability
  ##         of this measurement.
  ## Sample values include: 1] all; 2] most; 3] range
  attribute scope { sga_data.enumerated }?
sga_att.breaking.attributes = sga_att.breaking.attribute.break
sga_att.breaking.attribute.break =
  
  ## indicates whether or not the  element
  ##	bearing this attribute should be considered to mark the end of
  ##	an orthographic token in the same way as whitespace.
  attribute break { sga_data.enumerated }?
sga_att.datable.w3c.attributes =
  sga_att.datable.w3c.attribute.period,
  sga_att.datable.w3c.attribute.when,
  sga_att.datable.w3c.attribute.notBefore,
  sga_att.datable.w3c.attribute.notAfter,
  sga_att.datable.w3c.attribute.from,
  sga_att.datable.w3c.attribute.to
sga_att.datable.w3c.attribute.period =
  
  ## supplies a pointer to some location defining a named
  ##       period of time within which the datable item is understood to
  ##       have occurred.
  attribute period { sga_data.pointer }?
sga_att.datable.w3c.attribute.when =
  
  ## supplies the value of the date or time in a standard form,
  ##       e.g. yyyy-mm-dd.
  attribute when { sga_data.temporal.w3c }?
sga_att.datable.w3c.attribute.notBefore =
  
  ## specifies the earliest possible date for the event in
  ##	  standard form, e.g. yyyy-mm-dd.
  attribute notBefore { sga_data.temporal.w3c }?
sga_att.datable.w3c.attribute.notAfter =
  
  ## specifies the latest possible date for the event in
  ##	  standard form, e.g. yyyy-mm-dd.
  attribute notAfter { sga_data.temporal.w3c }?
sga_att.datable.w3c.attribute.from =
  
  ## indicates the starting point of the period in standard form, e.g. yyyy-mm-dd.
  attribute from { sga_data.temporal.w3c }?
sga_att.datable.w3c.attribute.to =
  
  ## indicates the ending point of the period in standard
  ##	  form, e.g. yyyy-mm-dd.
  attribute to { sga_data.temporal.w3c }?
sga_att.datable.attributes = sga_att.datable.w3c.attributes
sga_att.declarable.attributes = sga_att.declarable.attribute.default
sga_att.declarable.attribute.default =
  
  ## indicates whether or not this element is selected by default when
  ## its parent is selected.
  [ a:defaultValue = "false" ]
  attribute default {
    
    ## This element is selected if its parent is selected
    "true"
    | 
      ## This element can only be selected explicitly, unless it is the
      ## only one of its kind, in which case it is selected if its parent is selected.
      "false"
  }?
sga_att.declaring.attributes = sga_att.declaring.attribute.decls
sga_att.declaring.attribute.decls =
  
  ## identifies one or more declarable elements within the
  ## header, which are understood to apply to the element bearing this
  ## attribute and its content.
  attribute decls {
    list { sga_data.pointer, sga_data.pointer* }
  }?
sga_att.divLike.attributes =
  sga_att.divLike.attribute.org,
  sga_att.divLike.attribute.sample,
  sga_att.divLike.attribute.part
sga_att.divLike.attribute.org =
  
  ## (organization) specifies how the content of the division is organized.
  [ a:defaultValue = "uniform" ]
  attribute org {
    
    ## composite content: i.e. no claim is made about the
    ##		  sequence in which the immediate contents of this division
    ##		  are to be processed, or their inter-relationships.
    "composite"
    | 
      ## uniform content: i.e. the immediate contents of this
      ##		  element are regarded as forming a logical unit, to be
      ##		  processed in sequence.
      "uniform"
  }?
sga_att.divLike.attribute.sample =
  
  ## indicates whether this division is a sample of the
  ##		original source and if so, from which part.
  [ a:defaultValue = "complete" ]
  attribute sample {
    
    ## division lacks material present at end in source.
    "initial"
    | 
      ## division lacks material at start and end.
      "medial"
    | 
      ## division lacks material at start.
      "final"
    | 
      ## position of sampled material within original unknown.
      "unknown"
    | 
      ## division is not a sample.
      "complete"
  }?
sga_att.divLike.attribute.part =
  
  ## specifies whether or not the division is fragmented by
  ##		some other structural element, for example a speech which is
  ##		divided between two or more verse stanzas.
  [ a:defaultValue = "N" ]
  attribute part {
    
    ## (yes) the division is incomplete in some respect
    "Y"
    | 
      ## (no) either the division is complete, or no claim is made as to its completeness.
      "N"
    | 
      ## (initial) the initial part of an incomplete division
      "I"
    | 
      ## (medial) a medial part of an incomplete division
      "M"
    | 
      ## (final) the final part of an incomplete division
      "F"
  }?
sga_att.docStatus.attributes = sga_att.docStatus.attribute.status
sga_att.docStatus.attribute.status =
  
  ## describes the status of a document either currently or, when
  ## associated with a dated element, at the time indicated.
  ## Sample values include: 1] approved; 2] candidate; 3] cleared; 4] deprecated; 5] draft; 6] embargoed; 7] expired; 8] frozen; 9] galley; 10] proposed; 11] published; 12] recommendation; 13] submitted; 14] unfinished; 15] withdrawn
  [ a:defaultValue = "draft" ] attribute status { sga_data.enumerated }?
sga_att.responsibility.attributes =
  sga_att.responsibility.attribute.cert,
  sga_att.responsibility.attribute.resp
sga_att.responsibility.attribute.cert =
  
  ## (certainty) signifies the degree of certainty associated with the intervention or interpretation.
  attribute cert { sga_data.certainty }?
sga_att.responsibility.attribute.resp =
  
  ## (responsible party) indicates the agency responsible for the intervention or interpretation, for example an
  ##         editor or transcriber.
  attribute resp {
    list { sga_data.pointer, sga_data.pointer* }
  }?
sga_att.editLike.attributes =
  sga_att.dimensions.attributes,
  sga_att.responsibility.attributes,
  sga_att.editLike.attribute.evidence,
  sga_att.editLike.attribute.source
sga_att.editLike.attribute.evidence =
  
  ## indicates the nature of the evidence supporting the reliability or accuracy of the
  ##         intervention or interpretation.
  ## Suggested values include: 1] internal; 2] external; 3] conjecture
  attribute evidence {
    list {
      (
       ## there is internal evidence to support the intervention.
       "internal"
       | 
         ## there is external evidence to support the intervention.
         "external"
       | 
         ## the intervention or interpretation has been made by the editor, cataloguer, or
         ##             scholar on the basis of their expertise.
         "conjecture"
       | xsd:Name),
      (
       ## there is internal evidence to support the intervention.
       "internal"
       | 
         ## there is external evidence to support the intervention.
         "external"
       | 
         ## the intervention or interpretation has been made by the editor, cataloguer, or
         ##             scholar on the basis of their expertise.
         "conjecture"
       | xsd:Name)*
    }
  }?
sga_att.editLike.attribute.source =
  
  ## contains a list of one or more pointers indicating sources
  ##       supporting the given  intervention or interpretation.
  attribute source {
    list { sga_data.pointer, sga_data.pointer* }
  }?
sga_att.global.attributes =
  sga_att.global.attribute.xmlid,
  sga_att.global.attribute.n,
  sga_att.global.attribute.xmllang,
  sga_att.global.attribute.rend,
  sga_att.global.attribute.rendition,
  sga_att.global.attribute.xmlbase,
  sga_att.global.attribute.xmlspace
sga_att.global.attribute.xmlid =
  
  ## (identifier) provides a unique identifier for the element bearing the attribute.
  attribute xml:id { xsd:ID }?
sga_att.global.attribute.n =
  
  ## (number) gives a number (or other label) for an element, which is not necessarily unique within
  ##         the document.
  attribute n {
    list { sga_data.word, sga_data.word* }
  }?
sga_att.global.attribute.xmllang =
  
  ## (language) indicates the language of the element content using a tag generated
  ##         according to BCP 47
  ##          
  attribute xml:lang { sga_data.language }?
sga_att.global.attribute.rend =
  
  ## (rendition) indicates how the element in question was rendered or presented in the source text.
  attribute rend {
    list { sga_data.word, sga_data.word* }
  }?
sga_att.global.attribute.rendition =
  
  ## points to a description of the rendering or presentation used for this element in the
  ##         source text.
  attribute rendition {
    list { sga_data.pointer, sga_data.pointer* }
  }?
sga_att.global.attribute.xmlbase =
  
  ## provides a base URI reference with which applications can resolve relative URI
  ##         references into absolute URI references.
  attribute xml:base { sga_data.pointer }?
sga_att.global.attribute.xmlspace =
  
  ## signals an intention about how white space should be 
  ##       managed by  applications. 
  attribute xml:space {
    
    ## the processor should treat white space according to the
    ##	default XML white space handling rules
    "default"
    | 
      ## the processor should preserve unchanged any and all
      ##	white space in the source
      "preserve"
  }?
sga_att.handFeatures.attributes =
  sga_att.handFeatures.attribute.scribe,
  sga_att.handFeatures.attribute.scribeRef,
  sga_att.handFeatures.attribute.script,
  sga_att.handFeatures.attribute.scriptRef,
  sga_att.handFeatures.attribute.medium,
  sga_att.handFeatures.attribute.scope
sga_att.handFeatures.attribute.scribe =
  
  ## gives a name or other identifier for the scribe
  ## believed to be responsible for this hand.
  attribute scribe { sga_data.name }?
sga_att.handFeatures.attribute.scribeRef =
  
  ## points to a full description of the scribe concerned, typically supplied by a person element
  ##       elsewhere in the description.
  attribute scribeRef {
    list { sga_data.pointer, sga_data.pointer* }
  }?
sga_att.handFeatures.attribute.script =
  
  ## characterizes the particular script or writing style used by
  ## this hand, for example secretary, copperplate, Chancery, Italian, etc.
  attribute script {
    list { sga_data.name, sga_data.name* }
  }?
sga_att.handFeatures.attribute.scriptRef =
  
  ## points to a full description of the script or writing style used by
  ## this hand, typically supplied by a scriptNote element
  ##       elsewhere in the description.
  attribute scriptRef {
    list { sga_data.pointer, sga_data.pointer* }
  }?
sga_att.handFeatures.attribute.medium =
  
  ## describes the tint or type of ink, e.g. brown, or other
  ## writing medium, e.g. pencil
  attribute medium { sga_data.enumerated }?
sga_att.handFeatures.attribute.scope =
  
  ## specifies how widely this  hand is used in the manuscript.
  attribute scope {
    
    ## only this hand is used throughout the manuscript
    "sole"
    | 
      ## this hand is used through most of the manuscript
      "major"
    | 
      ## this hand is used occasionally in the manuscript
      "minor"
  }?
sga_att.internetMedia.attributes =
  sga_att.internetMedia.attribute.mimeType
sga_att.internetMedia.attribute.mimeType =
  
  ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
  attribute mimeType { sga_data.word }?
sga_att.naming.attributes =
  sga_att.canonical.attributes,
  sga_att.naming.attribute.role,
  sga_att.naming.attribute.nymRef
sga_att.naming.attribute.role =
  
  ## may be used to specify further information about the entity referenced by
  ## this name, for example the occupation of a person, or the status of a place. 
  attribute role { sga_data.enumerated }?
sga_att.naming.attribute.nymRef =
  
  ## (reference to the canonical name) provides a means of locating the canonical form
  ##       (nym) of the names associated with the object
  ##        named by
  ##       the element bearing it.
  attribute nymRef {
    list { sga_data.pointer, sga_data.pointer* }
  }?
sga_att.placement.attributes = sga_att.placement.attribute.place
sga_att.placement.attribute.place =
  
  ## 
  ## Suggested values include: 1] below; 2] bottom; 3] margin; 4] top; 5] opposite; 6] overleaf; 7] above; 8] end; 9] inline; 10] inspace
  attribute place {
    list {
      (
       ## below the line
       "below"
       | 
         ## at the foot of the page
         "bottom"
       | 
         ## in the margin (left, right, or both)
         "margin"
       | 
         ## at the top of the page
         "top"
       | 
         ## on the opposite, i.e. facing, page
         "opposite"
       | 
         ## on the other side of the leaf
         "overleaf"
       | 
         ## above the line
         "above"
       | 
         ## at the end of e.g. chapter or volume.
         "end"
       | 
         ## within the body of the text.
         "inline"
       | 
         ##  in a predefined space, for example left by an earlier scribe.
         "inspace"
       | xsd:Name),
      (
       ## below the line
       "below"
       | 
         ## at the foot of the page
         "bottom"
       | 
         ## in the margin (left, right, or both)
         "margin"
       | 
         ## at the top of the page
         "top"
       | 
         ## on the opposite, i.e. facing, page
         "opposite"
       | 
         ## on the other side of the leaf
         "overleaf"
       | 
         ## above the line
         "above"
       | 
         ## at the end of e.g. chapter or volume.
         "end"
       | 
         ## within the body of the text.
         "inline"
       | 
         ##  in a predefined space, for example left by an earlier scribe.
         "inspace"
       | xsd:Name)*
    }
  }?
sga_att.typed.attributes =
  sga_att.typed.attribute.type, sga_att.typed.attribute.subtype
sga_att.typed.attribute.type =
  
  ## characterizes the element in some sense, using any convenient
  ##  classification scheme or typology.
  attribute type { sga_data.enumerated }?
sga_att.typed.attribute.subtype =
  
  ## provides a sub-categorization of the element, if needed
  attribute subtype { sga_data.enumerated }?
sga_att.pointing.attributes =
  sga_att.pointing.attribute.target, sga_att.pointing.attribute.evaluate
sga_att.pointing.attribute.target =
  
  ## specifies the destination of the reference by supplying one or more URI References
  attribute target {
    list { sga_data.pointer, sga_data.pointer* }
  }?
sga_att.pointing.attribute.evaluate =
  
  ## specifies the intended meaning when the target of a
  ##       pointer is itself a pointer.
  attribute evaluate {
    
    ## if the element pointed to is itself a pointer, then
    ##	  the target of that pointer will be taken, and so on, until
    ##	  an element is found which is not a pointer.
    "all"
    | 
      ## if the element pointed to is itself a pointer, then
      ##	  its target (whether a pointer or not) is taken as the target
      ##	  of this pointer.
      "one"
    | 
      ## no further evaluation of targets is carried out
      ##	  beyond that needed to find the element specified in the
      ##	  pointer's target.
      "none"
  }?
sga_att.sourced.attributes = sga_att.sourced.attribute.ed
sga_att.sourced.attribute.ed =
  
  ## (edition) supplies an arbitrary identifier for the source edition in which
  ##       the associated feature (for example, a  page, column, or line
  ##       break) occurs at this point in the text.
  attribute ed {
    list { sga_data.code, sga_data.code* }
  }?
sga_att.spanning.attributes = sga_att.spanning.attribute.spanTo
sga_att.spanning.attribute.spanTo =
  
  ## indicates the end of a span initiated by the element
  ##	bearing this attribute.
  attribute spanTo { sga_data.pointer }?
sga_att.transcriptional.attributes =
  sga_att.editLike.attributes,
  sga_att.transcriptional.attribute.hand,
  sga_att.transcriptional.attribute.status,
  sga_att.transcriptional.attribute.seq
sga_att.transcriptional.attribute.hand =
  
  ## signifies the hand of the agent which made the intervention.
  attribute hand { sga_data.pointer }?
sga_att.transcriptional.attribute.status =
  
  ## indicates the effect of the intervention, for example in
  ##       the case of a deletion, strikeouts
  ##       which include too much or too little text, or in the case of an
  ##       addition, an insertion which duplicates some of the text
  ##       already present.
  ## Sample values include: 1] duplicate; 2] duplicate-partial; 3] excessStart; 4] excessEnd; 5] shortStart; 6] shortEnd; 7] partial; 8] unremarkable
  [ a:defaultValue = "unremarkable" ]
  attribute status { sga_data.enumerated }?
sga_att.transcriptional.attribute.seq =
  
  ## (sequence) assigns a sequence number related to the order in which
  ##       the encoded features carrying this attribute are believed to have occurred.
  attribute seq { sga_data.count }?
sga_att.translatable.attributes = sga_att.translatable.attribute.version
sga_att.translatable.attribute.version =
  
  ## specifies the version name or number of the source from
  ##	which the translated version was derived
  attribute version { sga_data.word }?
sga_model.nameLike.agent = sga_name | sga_persName
sga_model.nameLike.agent_alternation = sga_name | sga_persName
sga_model.nameLike.agent_sequence = sga_name, sga_persName
sga_model.nameLike.agent_sequenceOptional = sga_name?, sga_persName?
sga_model.nameLike.agent_sequenceOptionalRepeatable =
  sga_name*, sga_persName*
sga_model.nameLike.agent_sequenceRepeatable = sga_name+, sga_persName+
sga_model.segLike = notAllowed
sga_model.segLike_alternation = notAllowed
sga_model.segLike_sequence = empty
sga_model.segLike_sequenceOptional = empty
sga_model.segLike_sequenceOptionalRepeatable = empty
sga_model.segLike_sequenceRepeatable = notAllowed
sga_model.hiLike = sga_hi
sga_model.hiLike_alternation = sga_hi
sga_model.hiLike_sequence = sga_hi
sga_model.hiLike_sequenceOptional = sga_hi?
sga_model.hiLike_sequenceOptionalRepeatable = sga_hi*
sga_model.hiLike_sequenceRepeatable = sga_hi+
sga_model.emphLike =
  sga_foreign
  | sga_emph
  | sga_distinct
  | sga_mentioned
  | sga_soCalled
  | sga_gloss
  | sga_term
  | sga_title
sga_model.emphLike_alternation =
  sga_foreign
  | sga_emph
  | sga_distinct
  | sga_mentioned
  | sga_soCalled
  | sga_gloss
  | sga_term
  | sga_title
sga_model.emphLike_sequence =
  sga_foreign,
  sga_emph,
  sga_distinct,
  sga_mentioned,
  sga_soCalled,
  sga_gloss,
  sga_term,
  sga_title
sga_model.emphLike_sequenceOptional =
  sga_foreign?,
  sga_emph?,
  sga_distinct?,
  sga_mentioned?,
  sga_soCalled?,
  sga_gloss?,
  sga_term?,
  sga_title?
sga_model.emphLike_sequenceOptionalRepeatable =
  sga_foreign*,
  sga_emph*,
  sga_distinct*,
  sga_mentioned*,
  sga_soCalled*,
  sga_gloss*,
  sga_term*,
  sga_title*
sga_model.emphLike_sequenceRepeatable =
  sga_foreign+,
  sga_emph+,
  sga_distinct+,
  sga_mentioned+,
  sga_soCalled+,
  sga_gloss+,
  sga_term+,
  sga_title+
sga_model.highlighted = sga_model.hiLike | sga_model.emphLike
sga_model.highlighted_alternation =
  sga_model.hiLike_alternation | sga_model.emphLike_alternation
sga_model.highlighted_sequence =
  sga_model.hiLike_sequence, sga_model.emphLike_sequence
sga_model.highlighted_sequenceOptional =
  sga_model.hiLike_sequenceOptional?,
  sga_model.emphLike_sequenceOptional?
sga_model.highlighted_sequenceOptionalRepeatable =
  sga_model.hiLike_sequenceOptionalRepeatable*,
  sga_model.emphLike_sequenceOptionalRepeatable*
sga_model.highlighted_sequenceRepeatable =
  sga_model.hiLike_sequenceRepeatable+,
  sga_model.emphLike_sequenceRepeatable+
sga_model.dateLike = sga_date | sga_time
sga_model.dateLike_alternation = sga_date | sga_time
sga_model.dateLike_sequence = sga_date, sga_time
sga_model.dateLike_sequenceOptional = sga_date?, sga_time?
sga_model.dateLike_sequenceOptionalRepeatable = sga_date*, sga_time*
sga_model.dateLike_sequenceRepeatable = sga_date+, sga_time+
sga_model.measureLike = sga_num
sga_model.measureLike_alternation = sga_num
sga_model.measureLike_sequence = sga_num
sga_model.measureLike_sequenceOptional = sga_num?
sga_model.measureLike_sequenceOptionalRepeatable = sga_num*
sga_model.measureLike_sequenceRepeatable = sga_num+
sga_model.egLike = notAllowed
sga_model.egLike_alternation = notAllowed
sga_model.egLike_sequence = empty
sga_model.egLike_sequenceOptional = empty
sga_model.egLike_sequenceOptionalRepeatable = empty
sga_model.egLike_sequenceRepeatable = notAllowed
sga_model.graphicLike = sga_graphic
sga_model.graphicLike_alternation = sga_graphic
sga_model.graphicLike_sequence = sga_graphic
sga_model.graphicLike_sequenceOptional = sga_graphic?
sga_model.graphicLike_sequenceOptionalRepeatable = sga_graphic*
sga_model.graphicLike_sequenceRepeatable = sga_graphic+
sga_model.pPart.editorial = sga_choice | sga_abbr | sga_expan
sga_model.pPart.editorial_alternation =
  sga_choice | sga_abbr | sga_expan
sga_model.pPart.editorial_sequence = sga_choice, sga_abbr, sga_expan
sga_model.pPart.editorial_sequenceOptional =
  sga_choice?, sga_abbr?, sga_expan?
sga_model.pPart.editorial_sequenceOptionalRepeatable =
  sga_choice*, sga_abbr*, sga_expan*
sga_model.pPart.editorial_sequenceRepeatable =
  sga_choice+, sga_abbr+, sga_expan+
sga_model.pPart.transcriptional =
  sga_sic
  | sga_corr
  | sga_reg
  | sga_orig
  | sga_add
  | sga_del
  | sga_unclear
sga_model.pPart.transcriptional_alternation =
  sga_sic
  | sga_corr
  | sga_reg
  | sga_orig
  | sga_add
  | sga_del
  | sga_unclear
sga_model.pPart.transcriptional_sequence =
  sga_sic, sga_corr, sga_reg, sga_orig, sga_add, sga_del, sga_unclear
sga_model.pPart.transcriptional_sequenceOptional =
  sga_sic?,
  sga_corr?,
  sga_reg?,
  sga_orig?,
  sga_add?,
  sga_del?,
  sga_unclear?
sga_model.pPart.transcriptional_sequenceOptionalRepeatable =
  sga_sic*,
  sga_corr*,
  sga_reg*,
  sga_orig*,
  sga_add*,
  sga_del*,
  sga_unclear*
sga_model.pPart.transcriptional_sequenceRepeatable =
  sga_sic+,
  sga_corr+,
  sga_reg+,
  sga_orig+,
  sga_add+,
  sga_del+,
  sga_unclear+
sga_model.pPart.edit =
  sga_model.pPart.editorial | sga_model.pPart.transcriptional
sga_model.pPart.edit_alternation =
  sga_model.pPart.editorial_alternation
  | sga_model.pPart.transcriptional_alternation
sga_model.pPart.edit_sequence =
  sga_model.pPart.editorial_sequence,
  sga_model.pPart.transcriptional_sequence
sga_model.pPart.edit_sequenceOptional =
  sga_model.pPart.editorial_sequenceOptional?,
  sga_model.pPart.transcriptional_sequenceOptional?
sga_model.pPart.edit_sequenceOptionalRepeatable =
  sga_model.pPart.editorial_sequenceOptionalRepeatable*,
  sga_model.pPart.transcriptional_sequenceOptionalRepeatable*
sga_model.pPart.edit_sequenceRepeatable =
  sga_model.pPart.editorial_sequenceRepeatable+,
  sga_model.pPart.transcriptional_sequenceRepeatable+
sga_model.ptrLike = sga_ptr | sga_ref
sga_model.ptrLike_alternation = sga_ptr | sga_ref
sga_model.ptrLike_sequence = sga_ptr, sga_ref
sga_model.ptrLike_sequenceOptional = sga_ptr?, sga_ref?
sga_model.ptrLike_sequenceOptionalRepeatable = sga_ptr*, sga_ref*
sga_model.ptrLike_sequenceRepeatable = sga_ptr+, sga_ref+
sga_model.global.meta = sga_index
sga_model.global.meta_alternation = sga_index
sga_model.global.meta_sequence = sga_index
sga_model.global.meta_sequenceOptional = sga_index?
sga_model.global.meta_sequenceOptionalRepeatable = sga_index*
sga_model.global.meta_sequenceRepeatable = sga_index+
sga_model.milestoneLike = sga_milestone | sga_pb | sga_lb | sga_cb
sga_model.milestoneLike_alternation =
  sga_milestone | sga_pb | sga_lb | sga_cb
sga_model.milestoneLike_sequence = sga_milestone, sga_pb, sga_lb, sga_cb
sga_model.milestoneLike_sequenceOptional =
  sga_milestone?, sga_pb?, sga_lb?, sga_cb?
sga_model.milestoneLike_sequenceOptionalRepeatable =
  sga_milestone*, sga_pb*, sga_lb*, sga_cb*
sga_model.milestoneLike_sequenceRepeatable =
  sga_milestone+, sga_pb+, sga_lb+, sga_cb+
sga_model.gLike = notAllowed
sga_model.biblLike = sga_bibl
sga_model.biblLike_alternation = sga_bibl
sga_model.biblLike_sequence = sga_bibl
sga_model.biblLike_sequenceOptional = sga_bibl?
sga_model.biblLike_sequenceOptionalRepeatable = sga_bibl*
sga_model.biblLike_sequenceRepeatable = sga_bibl+
sga_model.headLike = sga_head
sga_model.headLike_alternation = sga_head
sga_model.headLike_sequence = sga_head
sga_model.headLike_sequenceOptional = sga_head?
sga_model.headLike_sequenceOptionalRepeatable = sga_head*
sga_model.headLike_sequenceRepeatable = sga_head+
sga_model.labelLike = sga_desc
sga_model.labelLike_alternation = sga_desc
sga_model.labelLike_sequence = sga_desc
sga_model.labelLike_sequenceOptional = sga_desc?
sga_model.labelLike_sequenceOptionalRepeatable = sga_desc*
sga_model.labelLike_sequenceRepeatable = sga_desc+
sga_model.listLike = sga_list
sga_model.listLike_alternation = sga_list
sga_model.listLike_sequence = sga_list
sga_model.listLike_sequenceOptional = sga_list?
sga_model.listLike_sequenceOptionalRepeatable = sga_list*
sga_model.listLike_sequenceRepeatable = sga_list+
sga_model.noteLike = sga_note
sga_model.noteLike_alternation = sga_note
sga_model.noteLike_sequence = sga_note
sga_model.noteLike_sequenceOptional = sga_note?
sga_model.noteLike_sequenceOptionalRepeatable = sga_note*
sga_model.noteLike_sequenceRepeatable = sga_note+
sga_model.lLike = sga_l
sga_model.lLike_alternation = sga_l
sga_model.lLike_sequence = sga_l
sga_model.lLike_sequenceOptional = sga_l?
sga_model.lLike_sequenceOptionalRepeatable = sga_l*
sga_model.lLike_sequenceRepeatable = sga_l+
sga_model.pLike = sga_p
sga_model.pLike_alternation = sga_p
sga_model.pLike_sequence = sga_p
sga_model.pLike_sequenceOptional = sga_p?
sga_model.pLike_sequenceOptionalRepeatable = sga_p*
sga_model.pLike_sequenceRepeatable = sga_p+
sga_model.stageLike = sga_stage
sga_model.stageLike_alternation = sga_stage
sga_model.stageLike_sequence = sga_stage
sga_model.stageLike_sequenceOptional = sga_stage?
sga_model.stageLike_sequenceOptionalRepeatable = sga_stage*
sga_model.stageLike_sequenceRepeatable = sga_stage+
sga_model.entryPart = notAllowed
sga_model.global.edit = sga_gap | sga_space
sga_model.global.edit_alternation = sga_gap | sga_space
sga_model.global.edit_sequence = sga_gap, sga_space
sga_model.global.edit_sequenceOptional = sga_gap?, sga_space?
sga_model.global.edit_sequenceOptionalRepeatable = sga_gap*, sga_space*
sga_model.global.edit_sequenceRepeatable = sga_gap+, sga_space+
sga_model.divPart =
  sga_model.lLike | sga_model.pLike | sga_lg | sga_sp | sga_floatingText
sga_model.divPart_alternation =
  sga_model.lLike_alternation
  | sga_model.pLike_alternation
  | sga_lg
  | sga_sp
  | sga_floatingText
sga_model.divPart_sequence =
  sga_model.lLike_sequence,
  sga_model.pLike_sequence,
  sga_lg,
  sga_sp,
  sga_floatingText
sga_model.divPart_sequenceOptional =
  sga_model.lLike_sequenceOptional?,
  sga_model.pLike_sequenceOptional?,
  sga_lg?,
  sga_sp?,
  sga_floatingText?
sga_model.divPart_sequenceOptionalRepeatable =
  sga_model.lLike_sequenceOptionalRepeatable*,
  sga_model.pLike_sequenceOptionalRepeatable*,
  sga_lg*,
  sga_sp*,
  sga_floatingText*
sga_model.divPart_sequenceRepeatable =
  sga_model.lLike_sequenceRepeatable+,
  sga_model.pLike_sequenceRepeatable+,
  sga_lg+,
  sga_sp+,
  sga_floatingText+
sga_model.persStateLike = sga_persName
sga_model.persStateLike_alternation = sga_persName
sga_model.persStateLike_sequence = sga_persName
sga_model.persStateLike_sequenceOptional = sga_persName?
sga_model.persStateLike_sequenceOptionalRepeatable = sga_persName*
sga_model.persStateLike_sequenceRepeatable = sga_persName+
sga_model.placeNamePart = sga_placeName
sga_model.placeNamePart_alternation = sga_placeName
sga_model.placeNamePart_sequence = sga_placeName
sga_model.placeNamePart_sequenceOptional = sga_placeName?
sga_model.placeNamePart_sequenceOptionalRepeatable = sga_placeName*
sga_model.placeNamePart_sequenceRepeatable = sga_placeName+
sga_model.placeStateLike = sga_model.placeNamePart
sga_model.placeStateLike_alternation =
  sga_model.placeNamePart_alternation
sga_model.placeStateLike_sequence = sga_model.placeNamePart_sequence
sga_model.placeStateLike_sequenceOptional =
  sga_model.placeNamePart_sequenceOptional?
sga_model.placeStateLike_sequenceOptionalRepeatable =
  sga_model.placeNamePart_sequenceOptionalRepeatable*
sga_model.placeStateLike_sequenceRepeatable =
  sga_model.placeNamePart_sequenceRepeatable+
sga_model.publicationStmtPart =
  sga_address
  | sga_date
  | sga_publisher
  | sga_pubPlace
  | sga_distributor
  | sga_authority
  | sga_idno
  | sga_availability
sga_model.glossLike = sga_desc | sga_gloss
sga_model.quoteLike = sga_quote | sga_cit
sga_model.quoteLike_alternation = sga_quote | sga_cit
sga_model.quoteLike_sequence = sga_quote, sga_cit
sga_model.quoteLike_sequenceOptional = sga_quote?, sga_cit?
sga_model.quoteLike_sequenceOptionalRepeatable = sga_quote*, sga_cit*
sga_model.quoteLike_sequenceRepeatable = sga_quote+, sga_cit+
sga_model.qLike = sga_model.quoteLike | sga_said | sga_q
sga_model.qLike_alternation =
  sga_model.quoteLike_alternation | sga_said | sga_q
sga_model.qLike_sequence = sga_model.quoteLike_sequence, sga_said, sga_q
sga_model.qLike_sequenceOptional =
  sga_model.quoteLike_sequenceOptional?, sga_said?, sga_q?
sga_model.qLike_sequenceOptionalRepeatable =
  sga_model.quoteLike_sequenceOptionalRepeatable*, sga_said*, sga_q*
sga_model.qLike_sequenceRepeatable =
  sga_model.quoteLike_sequenceRepeatable+, sga_said+, sga_q+
sga_model.respLike =
  sga_author
  | sga_editor
  | sga_respStmt
  | sga_sponsor
  | sga_funder
  | sga_principal
sga_model.respLike_alternation =
  sga_author
  | sga_editor
  | sga_respStmt
  | sga_sponsor
  | sga_funder
  | sga_principal
sga_model.respLike_sequence =
  sga_author,
  sga_editor,
  sga_respStmt,
  sga_sponsor,
  sga_funder,
  sga_principal
sga_model.respLike_sequenceOptional =
  sga_author?,
  sga_editor?,
  sga_respStmt?,
  sga_sponsor?,
  sga_funder?,
  sga_principal?
sga_model.respLike_sequenceOptionalRepeatable =
  sga_author*,
  sga_editor*,
  sga_respStmt*,
  sga_sponsor*,
  sga_funder*,
  sga_principal*
sga_model.respLike_sequenceRepeatable =
  sga_author+,
  sga_editor+,
  sga_respStmt+,
  sga_sponsor+,
  sga_funder+,
  sga_principal+
sga_model.divWrapper =
  sga_byline
  | sga_dateline
  | sga_argument
  | sga_epigraph
  | sga_salute
  | sga_docAuthor
  | sga_docDate
sga_model.divWrapper_alternation =
  sga_byline
  | sga_dateline
  | sga_argument
  | sga_epigraph
  | sga_salute
  | sga_docAuthor
  | sga_docDate
sga_model.divWrapper_sequence =
  sga_byline,
  sga_dateline,
  sga_argument,
  sga_epigraph,
  sga_salute,
  sga_docAuthor,
  sga_docDate
sga_model.divWrapper_sequenceOptional =
  sga_byline?,
  sga_dateline?,
  sga_argument?,
  sga_epigraph?,
  sga_salute?,
  sga_docAuthor?,
  sga_docDate?
sga_model.divWrapper_sequenceOptionalRepeatable =
  sga_byline*,
  sga_dateline*,
  sga_argument*,
  sga_epigraph*,
  sga_salute*,
  sga_docAuthor*,
  sga_docDate*
sga_model.divWrapper_sequenceRepeatable =
  sga_byline+,
  sga_dateline+,
  sga_argument+,
  sga_epigraph+,
  sga_salute+,
  sga_docAuthor+,
  sga_docDate+
sga_model.divTopPart = sga_model.headLike | sga_opener
sga_model.divTopPart_alternation =
  sga_model.headLike_alternation | sga_opener
sga_model.divTopPart_sequence = sga_model.headLike_sequence, sga_opener
sga_model.divTopPart_sequenceOptional =
  sga_model.headLike_sequenceOptional?, sga_opener?
sga_model.divTopPart_sequenceOptionalRepeatable =
  sga_model.headLike_sequenceOptionalRepeatable*, sga_opener*
sga_model.divTopPart_sequenceRepeatable =
  sga_model.headLike_sequenceRepeatable+, sga_opener+
sga_model.divTop = sga_model.divWrapper | sga_model.divTopPart
sga_model.pLike.front =
  sga_head
  | sga_byline
  | sga_argument
  | sga_epigraph
  | sga_docTitle
  | sga_titlePart
  | sga_docAuthor
  | sga_docEdition
  | sga_docImprint
  | sga_docDate
sga_model.divBottomPart =
  sga_trailer | sga_closer | sga_signed | sga_postscript
sga_model.divBottomPart_alternation =
  sga_trailer | sga_closer | sga_signed | sga_postscript
sga_model.divBottomPart_sequence =
  sga_trailer, sga_closer, sga_signed, sga_postscript
sga_model.divBottomPart_sequenceOptional =
  sga_trailer?, sga_closer?, sga_signed?, sga_postscript?
sga_model.divBottomPart_sequenceOptionalRepeatable =
  sga_trailer*, sga_closer*, sga_signed*, sga_postscript*
sga_model.divBottomPart_sequenceRepeatable =
  sga_trailer+, sga_closer+, sga_signed+, sga_postscript+
sga_model.divBottom = sga_model.divWrapper | sga_model.divBottomPart
sga_model.titlepagePart =
  sga_graphic
  | sga_byline
  | sga_argument
  | sga_epigraph
  | sga_docTitle
  | sga_titlePart
  | sga_docAuthor
  | sga_imprimatur
  | sga_docEdition
  | sga_docImprint
  | sga_docDate
sga_model.msQuoteLike = sga_title
sga_model.msQuoteLike_alternation = sga_title
sga_model.msQuoteLike_sequence = sga_title
sga_model.msQuoteLike_sequenceOptional = sga_title?
sga_model.msQuoteLike_sequenceOptionalRepeatable = sga_title*
sga_model.msQuoteLike_sequenceRepeatable = sga_title+
sga_model.choicePart =
  sga_sic
  | sga_corr
  | sga_reg
  | sga_orig
  | sga_unclear
  | sga_abbr
  | sga_expan
sga_model.imprintPart =
  sga_publisher | sga_biblScope | sga_pubPlace | sga_distributor
sga_model.imprintPart_alternation =
  sga_publisher | sga_biblScope | sga_pubPlace | sga_distributor
sga_model.imprintPart_sequence =
  sga_publisher, sga_biblScope, sga_pubPlace, sga_distributor
sga_model.imprintPart_sequenceOptional =
  sga_publisher?, sga_biblScope?, sga_pubPlace?, sga_distributor?
sga_model.imprintPart_sequenceOptionalRepeatable =
  sga_publisher*, sga_biblScope*, sga_pubPlace*, sga_distributor*
sga_model.imprintPart_sequenceRepeatable =
  sga_publisher+, sga_biblScope+, sga_pubPlace+, sga_distributor+
sga_model.catDescPart = notAllowed
sga_model.addressLike = sga_email | sga_address
sga_model.addressLike_alternation = sga_email | sga_address
sga_model.addressLike_sequence = sga_email, sga_address
sga_model.addressLike_sequenceOptional = sga_email?, sga_address?
sga_model.addressLike_sequenceOptionalRepeatable =
  sga_email*, sga_address*
sga_model.addressLike_sequenceRepeatable = sga_email+, sga_address+
sga_model.nameLike =
  sga_model.nameLike.agent
  | sga_model.placeStateLike
  | sga_rs
  | sga_idno
sga_model.nameLike_alternation =
  sga_model.nameLike.agent_alternation
  | sga_model.placeStateLike_alternation
  | sga_rs
  | sga_idno
sga_model.nameLike_sequence =
  sga_model.nameLike.agent_sequence,
  sga_model.placeStateLike_sequence,
  sga_rs,
  sga_idno
sga_model.nameLike_sequenceOptional =
  sga_model.nameLike.agent_sequenceOptional?,
  sga_model.placeStateLike_sequenceOptional?,
  sga_rs?,
  sga_idno?
sga_model.nameLike_sequenceOptionalRepeatable =
  sga_model.nameLike.agent_sequenceOptionalRepeatable*,
  sga_model.placeStateLike_sequenceOptionalRepeatable*,
  sga_rs*,
  sga_idno*
sga_model.nameLike_sequenceRepeatable =
  sga_model.nameLike.agent_sequenceRepeatable+,
  sga_model.placeStateLike_sequenceRepeatable+,
  sga_rs+,
  sga_idno+
sga_model.global =
  sga_model.global.meta
  | sga_model.milestoneLike
  | sga_model.noteLike
  | sga_model.global.edit
sga_model.biblPart =
  sga_model.respLike
  | sga_model.imprintPart
  | sga_relatedItem
  | sga_edition
  | sga_extent
sga_model.frontPart = sga_divGen | sga_titlePage
sga_model.addrPart = sga_model.nameLike | sga_addrLine | sga_street
sga_model.pPart.data =
  sga_model.dateLike
  | sga_model.measureLike
  | sga_model.addressLike
  | sga_model.nameLike
sga_model.pPart.data_alternation =
  sga_model.dateLike_alternation
  | sga_model.measureLike_alternation
  | sga_model.addressLike_alternation
  | sga_model.nameLike_alternation
sga_model.pPart.data_sequence =
  sga_model.dateLike_sequence,
  sga_model.measureLike_sequence,
  sga_model.addressLike_sequence,
  sga_model.nameLike_sequence
sga_model.pPart.data_sequenceOptional =
  sga_model.dateLike_sequenceOptional?,
  sga_model.measureLike_sequenceOptional?,
  sga_model.addressLike_sequenceOptional?,
  sga_model.nameLike_sequenceOptional?
sga_model.pPart.data_sequenceOptionalRepeatable =
  sga_model.dateLike_sequenceOptionalRepeatable*,
  sga_model.measureLike_sequenceOptionalRepeatable*,
  sga_model.addressLike_sequenceOptionalRepeatable*,
  sga_model.nameLike_sequenceOptionalRepeatable*
sga_model.pPart.data_sequenceRepeatable =
  sga_model.dateLike_sequenceRepeatable+,
  sga_model.measureLike_sequenceRepeatable+,
  sga_model.addressLike_sequenceRepeatable+,
  sga_model.nameLike_sequenceRepeatable+
sga_model.inter =
  sga_model.egLike
  | sga_model.biblLike
  | sga_model.labelLike
  | sga_model.listLike
  | sga_model.stageLike
  | sga_model.qLike
sga_model.inter_alternation =
  sga_model.egLike_alternation
  | sga_model.biblLike_alternation
  | sga_model.labelLike_alternation
  | sga_model.listLike_alternation
  | sga_model.stageLike_alternation
  | sga_model.qLike_alternation
sga_model.inter_sequence =
  sga_model.egLike_sequence,
  sga_model.biblLike_sequence,
  sga_model.labelLike_sequence,
  sga_model.listLike_sequence,
  sga_model.stageLike_sequence,
  sga_model.qLike_sequence
sga_model.inter_sequenceOptional =
  sga_model.egLike_sequenceOptional?,
  sga_model.biblLike_sequenceOptional?,
  sga_model.labelLike_sequenceOptional?,
  sga_model.listLike_sequenceOptional?,
  sga_model.stageLike_sequenceOptional?,
  sga_model.qLike_sequenceOptional?
sga_model.inter_sequenceOptionalRepeatable =
  sga_model.egLike_sequenceOptionalRepeatable*,
  sga_model.biblLike_sequenceOptionalRepeatable*,
  sga_model.labelLike_sequenceOptionalRepeatable*,
  sga_model.listLike_sequenceOptionalRepeatable*,
  sga_model.stageLike_sequenceOptionalRepeatable*,
  sga_model.qLike_sequenceOptionalRepeatable*
sga_model.inter_sequenceRepeatable =
  sga_model.egLike_sequenceRepeatable+,
  sga_model.biblLike_sequenceRepeatable+,
  sga_model.labelLike_sequenceRepeatable+,
  sga_model.listLike_sequenceRepeatable+,
  sga_model.stageLike_sequenceRepeatable+,
  sga_model.qLike_sequenceRepeatable+
sga_model.common = sga_model.divPart | sga_model.inter
sga_model.phrase =
  sga_model.segLike
  | sga_model.highlighted
  | sga_model.graphicLike
  | sga_model.pPart.edit
  | sga_model.ptrLike
  | sga_model.pPart.data
sga_model.limitedPhrase =
  sga_model.emphLike
  | sga_model.pPart.editorial
  | sga_model.ptrLike
  | sga_model.pPart.data
sga_model.divLike = sga_div
sga_model.applicationLike = sga_application
sga_model.sourceDescPart = notAllowed
sga_model.editorialDeclPart =
  sga_correction
  | sga_normalization
  | sga_quotation
  | sga_hyphenation
  | sga_segmentation
  | sga_interpretation
sga_model.profileDescPart = sga_creation | sga_langUsage | sga_textClass
sga_model.resourceLike = notAllowed
sga_att.personal.attributes =
  sga_att.naming.attributes,
  sga_att.personal.attribute.full,
  sga_att.personal.attribute.sort
sga_att.personal.attribute.full =
  
  ## indicates whether the name component is given in full, as an
  ## abbreviation or simply as an initial.
  [ a:defaultValue = "yes" ]
  attribute full {
    
    ## the name component is spelled out in full.
    "yes"
    | 
      ## (abbreviated) the name component is given in an abbreviated form.
      "abb"
    | 
      ## (initial letter) the name component is indicated only by
      ## one initial.
      "init"
  }?
sga_att.personal.attribute.sort =
  
  ## specifies the sort order of the name component in relation
  ## to others within the personal name.
  attribute sort { sga_data.count }?
sga_p =
  
  ## (paragraph) marks paragraphs in prose.  
  element ns1:p {
    sga_macro.paraContent,
    sga_att.global.attributes,
    sga_att.declaring.attributes,
    empty
  }
sga_foreign =
  
  ## (foreign) identifies a word or phrase as belonging to some language other than that of the
  ##                 surrounding text.  
  element ns1:foreign {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_emph =
  
  ## (emphasized) marks words or phrases which are stressed or emphasized for
  ##         linguistic or rhetorical effect.  
  element ns1:emph {
    sga_macro.paraContent, sga_att.global.attributes, empty
  }
sga_hi =
  
  ## (highlighted) marks a word or phrase as graphically distinct from the
  ##         surrounding text, for reasons concerning which no claim is
  ##         made.   
  element ns1:hi {
    sga_macro.paraContent, sga_att.global.attributes, empty
  }
sga_distinct =
  
  ## identifies any word or phrase which is regarded as linguistically distinct, for example as
  ##         archaic, technical, dialectal, non-preferred, etc., or as forming part of a sublanguage.  
  element ns1:distinct {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    
    ## specifies the sublanguage or register to which the word or phrase is being
    ##                 assigned
    attribute type { sga_data.enumerated }?,
    
    ## specifies how the phrase is distinct diachronically
    attribute time { sga_data.code }?,
    
    ## specifies how the phrase is distinct diatopically
    attribute space { sga_data.code }?,
    
    ## specifies how the phrase is distinct diastatically
    attribute social { sga_data.code }?,
    empty
  }
sga_said =
  
  ## (speech or thought) indicates passages thought or spoken aloud, whether explicitly indicated in the source or
  ##     not, whether directly or indirectly reported, whether by real people or fictional characters. 
  element ns1:said {
    sga_macro.specialPara,
    sga_att.global.attributes,
    sga_att.ascribed.attributes,
    
    ## may be used to indicate whether the quoted matter is regarded as having been vocalized
    ##         or signed.
    [ a:defaultValue = "unknown" ]
    attribute aloud { sga_data.xTruthValue }?,
    
    ## may be used to indicate whether the quoted matter is regarded as direct or indirect
    ##         speech.
    [ a:defaultValue = "true" ]
    attribute direct { sga_data.xTruthValue }?,
    empty
  }
sga_quote =
  
  ## (quotation) contains a phrase or passage attributed by the narrator or author to some agency external
  ##         to the text.  
  element ns1:quote {
    sga_macro.specialPara,
    sga_att.global.attributes,
    sga_att.typed.attributes,
    empty
  }
sga_q =
  
  ## (separated from the surrounding text with quotation marks) contains material which is marked as (ostensibly) being somehow different than the
  ##     surrounding text, for any one of a variety of reasons including, but not limited to: direct
  ##     speech or thought, technical terms or jargon, authorial distance, quotations from elsewhere, and
  ##     passages that are mentioned but not used. 
  element ns1:q {
    sga_macro.specialPara,
    sga_att.global.attributes,
    sga_att.ascribed.attributes,
    
    ## may be used to indicate whether the offset passage is spoken or thought, or to
    ##         characterize it more finely.
    ## Suggested values include: 1] spoken; 2] thought; 3] written; 4] soCalled; 5] foreign(foreign words) ; 6] distinct(linguistically distinct) ; 7] term(technical term) ; 8] emph(rhetorically emphasized) ; 9] mentioned
    attribute type {
      
      ## representation of speech
      "spoken"
      | 
        ## representation of thought, e.g. internal monologue
        "thought"
      | 
        ## quotation from a written source
        "written"
      | 
        ## authorial distance
        "soCalled"
      | 
        ## (foreign words) 
        "foreign"
      | 
        ## (linguistically distinct) 
        "distinct"
      | 
        ## (technical term) 
        "term"
      | 
        ## (rhetorically emphasized) 
        "emph"
      | 
        ## refering to itself, not its normal referant
        "mentioned"
      | xsd:Name
    }?,
    empty
  }
sga_cit =
  
  ## (cited quotation) contains a quotation from some other document, together with a bibliographic reference to
  ##     its source. In a dictionary it may contain an example text with at least one occurrence of the
  ##     word form, used in the sense being described, or a translation of the headword, or an example.    
  element ns1:cit {
    (sga_model.qLike
     | sga_model.egLike
     | sga_model.biblLike
     | sga_model.ptrLike
     | sga_model.global
     | sga_model.entryPart)+,
    sga_att.global.attributes,
    sga_att.typed.attributes,
    empty
  }
sga_mentioned =
  
  ## marks words or phrases mentioned, not used. 
  element ns1:mentioned {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_soCalled =
  
  ## contains a word or phrase for which the author or narrator indicates a disclaiming of
  ##     responsibility, for example by the use of scare quotes or italics. 
  element ns1:soCalled {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_desc =
  
  ## (description) contains a brief description of the object documented by its parent element, including its
  ##     intended usage, purpose, or application where this is appropriate.    
  element ns1:desc {
    sga_macro.limitedContent,
    sga_att.global.attributes,
    sga_att.translatable.attributes,
    empty
  }
sga_gloss =
  
  ## identifies a phrase or word used to provide a gloss or definition for some other word or
  ##     phrase. 
  element ns1:gloss {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.declaring.attributes,
    sga_att.translatable.attributes,
    sga_att.typed.attributes,
    sga_att.pointing.attributes,
    
    ## (canonical reference) identifies the associated term element using a canonical reference from a
    ##         scheme defined in a refsDecl element in the TEI header
    attribute cRef { sga_data.pointer }?,
    empty
  }
sga_term =
  
  ## contains a single-word, multi-word, or symbolic designation which is regarded as a technical
  ##     term. 
  element ns1:term {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.declaring.attributes,
    sga_att.pointing.attributes,
    sga_att.typed.attributes,
    sga_att.canonical.attributes,
    
    ## identifies the associated gloss element using a canonical reference from a
    ##           scheme defined in a refsDecl element in the TEI header
    attribute cRef { sga_data.pointer }?,
    
    ## supplies the sort key for this term in an index.
    attribute sortKey { sga_data.word }?,
    empty
  }
sga_sic =
  
  ## (latin for thus or so
  ##   ) contains text reproduced although apparently incorrect or inaccurate. 
  element ns1:sic {
    sga_macro.paraContent,
    sga_att.global.attributes,
    sga_att.responsibility.attributes,
    empty
  }
sga_corr =
  
  ## (correction) contains the correct form of a passage apparently erroneous in the copy text. 
  element ns1:corr {
    sga_macro.paraContent,
    sga_att.global.attributes,
    sga_att.editLike.attributes,
    sga_att.typed.attributes,
    empty
  }
sga_choice =
  
  ## groups a number of alternative encodings for the same point in
  ##         a text. 
  element ns1:choice {
    (sga_model.choicePart | sga_choice)*,
    sga_att.global.attributes,
    empty
  }
sga_reg =
  
  ## (regularization) contains a reading which has been regularized or normalized in some sense.  
  element ns1:reg {
    sga_macro.paraContent,
    sga_att.global.attributes,
    sga_att.editLike.attributes,
    sga_att.typed.attributes,
    empty
  }
sga_orig =
  
  ## (original form) contains a reading which is marked as following the original, rather than being normalized
  ##         or corrected.  
  element ns1:orig {
    sga_macro.paraContent,
    sga_att.global.attributes,
    sga_att.responsibility.attributes,
    empty
  }
sga_gap =
  
  ## (gap) indicates a point where material has been omitted in a transcription, whether for editorial
  ##     reasons described in the TEI header, as part of sampling practice, or because the material is
  ##     illegible, invisible, or inaudible. 
  element ns1:gap {
    sga_model.glossLike*,
    sga_att.global.attributes,
    sga_att.editLike.attributes,
    
    ## gives the reason for omission. Sample values include sampling,
    ##         inaudible, irrelevant, cancelled.
    attribute reason {
      list { sga_data.word, sga_data.word* }
    }?,
    
    ## in the case of text omitted from the transcription because of deliberate deletion by an
    ##         identifiable hand, signifies the hand which made the deletion.
    attribute hand { sga_data.pointer }?,
    
    ## In the case of text omitted because of damage, categorizes the cause of the damage, if
    ##         it can be identified.
    ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
    attribute agent { sga_data.enumerated }?,
    empty
  }
sga_add =
  
  ## (addition) contains letters, words, or phrases inserted in the text by an
  ##         author, scribe, annotator, or corrector. 
  element ns1:add {
    sga_macro.paraContent,
    sga_att.global.attributes,
    sga_att.transcriptional.attributes,
    sga_att.placement.attributes,
    sga_att.typed.attributes,
    empty
  }
sga_del =
  
  ## (deletion) contains a letter, word, or passage deleted, marked as deleted, or otherwise indicated as
  ##     superfluous or spurious in the copy text by an author, scribe, annotator, or corrector. 
  element ns1:del {
    sga_macro.paraContent,
    sga_att.global.attributes,
    sga_att.transcriptional.attributes,
    sga_att.typed.attributes,
    empty
  }
sga_unclear =
  
  ## contains a word, phrase, or passage which cannot be transcribed with certainty because it
  ##         is illegible or inaudible in the source.  
  element ns1:unclear {
    sga_macro.paraContent,
    sga_att.global.attributes,
    sga_att.editLike.attributes,
    
    ## indicates why the material is hard to transcribe.
    attribute reason {
      list { sga_data.word, sga_data.word* }
    }?,
    
    ## Where the difficulty in transcription arises from action (partial deletion, etc.)
    ##                 assignable to an identifiable hand, signifies the hand responsible for the action.
    attribute hand { sga_data.pointer }?,
    
    ## Where the difficulty in transcription arises from damage, categorizes the cause of
    ##                 the damage, if it can be identified.
    ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
    attribute agent { sga_data.enumerated }?,
    empty
  }
sga_name =
  
  ## (name, proper noun) contains a proper noun or noun phrase. 
  element ns1:name {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.naming.attributes,
    sga_att.typed.attributes,
    empty
  }
sga_rs =
  
  ## (referencing string) contains a general purpose name or referring string.  
  element ns1:rs {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.naming.attributes,
    
    ## indicates more specifically the object referred to by the referencing string.
    ##                 Values might include person, place, ship,
    ##                     element etc.
    attribute type { sga_data.enumerated }?,
    empty
  }
sga_email =
  
  ## (electronic mail address) contains an e-mail address identifying a location to which
  ##         e-mail messages can be delivered.
  ##      
  element ns1:email {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_address =
  
  ## contains a postal  address, for example of a
  ##         publisher, an organization, or an individual.   
  element ns1:address {
    (sga_model.global*, (sga_model.addrPart, sga_model.global*)+),
    sga_att.global.attributes,
    empty
  }
sga_addrLine =
  
  ## (address line) contains one line of a postal address.   
  element ns1:addrLine {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_street =
  
  ## a full street address including any name or number identifying a
  ##         building as well as the name of the street or route on which it is
  ##         located. 
  element ns1:street {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_num =
  
  ## (number) contains a number, written in any form. 
  element ns1:num {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.ranging.attributes,
    
    ## indicates the type of numeric value.
    ## Suggested values include: 1] cardinal; 2] ordinal; 3] fraction; 4] percentage
    attribute type {
      
      ## absolute number, e.g. 21, 21.5
      "cardinal"
      | 
        ## ordinal number, e.g. 21st
        "ordinal"
      | 
        ## fraction, e.g. one half or three-quarters
        "fraction"
      | 
        ## a percentage
        "percentage"
      | xsd:Name
    }?,
    
    ## supplies the value of the number in standard form.
    attribute value { sga_data.numeric }?,
    empty
  }
sga_date =
  
  ## contains a date in any format.      
  element ns1:date {
    (text | sga_model.gLike | sga_model.phrase | sga_model.global)*,
    sga_att.global.attributes,
    sga_att.datable.attributes,
    sga_att.editLike.attributes,
    sga_att.typed.attributes,
    
    ## indicates the system or calendar to which the date represented by the content of this
    ##         element belongs.
    ## Suggested values include: 1] Gregorian; 2] Julian; 3] Islamic; 4] Hebrew; 5] Revolutionary; 6] Iranian; 7] Coptic; 8] Chinese
    attribute calendar {
      
      ## Gregorian calendar
      "Gregorian"
      | 
        ## Julian calendar
        "Julian"
      | 
        ## Islamic or Muslim (hijri) lunar calendar
        "Islamic"
      | 
        ## Hebrew or Jewish lunisolar calendar
        "Hebrew"
      | 
        ## French Revolutionary calendar
        "Revolutionary"
      | 
        ## Iranian or Persian (Jalaali) solar calendar
        "Iranian"
      | 
        ## Coptic or Alexandrian calendar
        "Coptic"
      | 
        ## Chinese lunisolar calendar
        "Chinese"
      | xsd:Name
    }?,
    empty
  }
sga_time =
  
  ## contains a phrase defining a time of day in any format. 
  element ns1:time {
    (text | sga_model.gLike | sga_model.phrase | sga_model.global)*,
    sga_att.global.attributes,
    sga_att.datable.attributes,
    sga_att.editLike.attributes,
    sga_att.typed.attributes,
    empty
  }
sga_abbr =
  
  ## (abbreviation) contains an abbreviation of any sort. 
  element ns1:abbr {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.responsibility.attributes,
    
    ## allows the encoder to classify the abbreviation according to some convenient
    ##                 typology.
    ## Sample values include: 1] suspension; 2] contraction; 3] brevigraph; 4] superscription; 5] acronym; 6] title; 7] organization; 8] geographic
    attribute type { sga_data.enumerated }?,
    empty
  }
sga_expan =
  
  ## (expansion) contains the expansion of an abbreviation. 
  element ns1:expan {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.editLike.attributes,
    empty
  }
sga_ptr =
  
  ## (pointer) defines a pointer to another location.  
  element ns1:ptr {
    empty
    >> sch:pattern [
         id = "ptr-constraint-ptrAtts"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ptr"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "	attributes 'target' and 'cRef' may be supplied."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    sga_att.global.attributes,
    sga_att.pointing.attributes,
    sga_att.typed.attributes,
    sga_att.declaring.attributes,
    
    ## (canonical reference) specifies the destination of the pointer by supplying a canonical reference from a
    ##         scheme defined in a refsDecl element in the TEI header
    attribute cRef {
      list { sga_data.word, sga_data.word* }
    }?,
    empty
  }
sga_ref =
  
  ## (reference) defines a reference to another location, possibly modified by additional text or comment.  
  element ns1:ref {
    sga_macro.paraContent
    >> sch:pattern [
         id = "ref-constraint-refAtts"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ref"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "	attributes 'target' and 'cRef' may be supplied."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    sga_att.global.attributes,
    sga_att.pointing.attributes,
    sga_att.typed.attributes,
    sga_att.declaring.attributes,
    
    ## (canonical reference) specifies the destination of the reference by supplying a canonical reference from a
    ##         scheme defined in a refsDecl element in the TEI header
    attribute cRef {
      list { sga_data.word, sga_data.word* }
    }?,
    empty
  }
sga_list =
  
  ## (list) contains any sequence of items organized as a list. 
  element ns1:list {
    ((sga_model.divTop | sga_model.global)*,
     ((sga_item, sga_model.global*)+
      | (empty?,
         empty?,
         (sga_model.global*, sga_item, sga_model.global*)+)),
     (sga_model.divBottom, sga_model.global*)*),
    sga_att.global.attributes,
    
    ## describes the form of the list.
    ## Suggested values include: 1] ordered; 2] bulleted; 3] simple; 4] gloss
    [ a:defaultValue = "simple" ]
    attribute type {
      
      ## list items are numbered or lettered. 
      "ordered"
      | 
        ## list items are marked with a bullet or other typographic device. 
        "bulleted"
      | 
        ## list items are not numbered or bulleted. 
        "simple"
      | 
        ## each list item glosses some term or concept, which is given by a label element
        ##             preceding the list item.
        "gloss"
      | xsd:Name
    }?,
    empty
  }
sga_item =
  
  ## contains one component of a list.  
  element ns1:item {
    sga_macro.specialPara, sga_att.global.attributes, empty
  }
sga_head =
  
  ## (heading) contains any type of heading, for example the title of a section, or the heading of a list,
  ##     glossary, manuscript description, etc. 
  element ns1:head {
    sga_macro.paraContent,
    sga_att.global.attributes,
    sga_att.typed.attributes,
    empty
  }
sga_note =
  
  ## contains a note or annotation.    
  element ns1:note {
    sga_macro.specialPara,
    sga_att.global.attributes,
    sga_att.placement.attributes,
    sga_att.pointing.attributes,
    sga_att.responsibility.attributes,
    sga_att.typed.attributes,
    
    ## indicates whether the copy text shows the exact place of reference for the note.
    [ a:defaultValue = "true" ]
    attribute anchored { sga_data.truthValue }?,
    
    ## points to the end of the span to which the note is attached, if the note is not embedded
    ##         in the text at that point.
    attribute targetEnd {
      list { sga_data.pointer, sga_data.pointer* }
    }?,
    empty
  }
sga_index =
  
  ## (index entry) marks a location to be indexed for whatever purpose. 
  element ns1:index {
    (sga_term, sga_index?)*,
    sga_att.global.attributes,
    sga_att.spanning.attributes,
    
    ## supplies a name to specify which index (of several) the index entry belongs to.
    attribute indexName { sga_data.name }?,
    empty
  }
sga_graphic =
  
  ## indicates the location of an inline graphic, illustration, or figure. 
  element ns1:graphic {
    sga_model.glossLike*,
    sga_att.global.attributes,
    sga_att.internetMedia.attributes,
    sga_att.declaring.attributes,
    
    ## The display width of the image
    attribute width { sga_data.outputMeasurement }?,
    
    ## The display height of the image
    attribute height { sga_data.outputMeasurement }?,
    
    ## A scale factor to be applied to the image to make it the desired display size
    attribute scale { sga_data.numeric }?,
    
    ## (uniform resource locator) A URL which refers to the image itself.
    attribute url { sga_data.pointer },
    empty
  }
sga_milestone =
  
  ## marks a boundary point separating any kind of section of a text, typically but not
  ##     necessarily indicating a point at which some part of a standard reference system changes, where
  ##     the change is not represented by a structural element. 
  element ns1:milestone {
    empty,
    sga_att.global.attributes,
    sga_att.typed.attributes,
    sga_att.sourced.attributes,
    sga_att.spanning.attributes,
    sga_att.breaking.attributes,
    
    ## provides a conventional name for the kind of section changing at this milestone.
    ## Suggested values include: 1] page; 2] column; 3] line; 4] book; 5] poem; 6] canto; 7] speaker; 8] stanza; 9] act; 10] scene; 11] section; 12] absent; 13] unnumbered
    attribute unit {
      
      ## physical page breaks (synonymous with the pb element).
      "page"
      | 
        ## column breaks.
        "column"
      | 
        ## line breaks (synonymous with the lb element).
        "line"
      | 
        ## any units termed book, liber, etc.
        "book"
      | 
        ## individual poems in a collection.
        "poem"
      | 
        ## cantos or other major sections of a poem.
        "canto"
      | 
        ## changes of speaker or narrator.
        "speaker"
      | 
        ## stanzas within a poem, book, or canto.
        "stanza"
      | 
        ## acts within a play.
        "act"
      | 
        ## scenes within a play or act.
        "scene"
      | 
        ## sections of any kind.
        "section"
      | 
        ## passages not present in the reference edition.
        "absent"
      | 
        ## passages present in the text, but not to be included as part of the reference.
        "unnumbered"
      | xsd:Name
    },
    empty
  }
sga_pb =
  
  ## (page break) marks the boundary between one page of a text and the next in a standard reference system. 
  element ns1:pb {
    empty,
    sga_att.global.attributes,
    sga_att.typed.attributes,
    sga_att.sourced.attributes,
    sga_att.spanning.attributes,
    sga_att.breaking.attributes,
    empty
  }
sga_lb =
  
  ## (line break) marks the start of a new (typographic) line in some edition or version of a text.  
  element ns1:lb {
    empty,
    sga_att.global.attributes,
    sga_att.typed.attributes,
    sga_att.sourced.attributes,
    sga_att.spanning.attributes,
    sga_att.breaking.attributes,
    empty
  }
sga_cb =
  
  ## (column break) marks the boundary between one column of a text and the next
  ##         in a standard reference system. 
  element ns1:cb {
    empty,
    sga_att.global.attributes,
    sga_att.typed.attributes,
    sga_att.sourced.attributes,
    sga_att.spanning.attributes,
    sga_att.breaking.attributes,
    empty
  }
sga_author =
  
  ## in a bibliographic reference, contains the name(s) of the
  ##   author(s), personal or corporate, of a work; for example in the same
  ##   form as that provided by a recognized bibliographic name authority.   
  element ns1:author {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.naming.attributes,
    empty
  }
sga_editor =
  
  ## secondary statement of responsibility for a bibliographic item, for example the name of an
  ##     individual, institution or organization, (or of several such) acting as editor, compiler,
  ##     translator, etc.  
  element ns1:editor {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.naming.attributes,
    empty
  }
sga_respStmt =
  
  ## (statement of responsibility) supplies a statement of responsibility for the intellectual content of a text, edition,
  ##     recording, or series, where the specialized elements for authors, editors, etc. do not suffice
  ##     or do not apply.    
  element ns1:respStmt {
    ((sga_resp+, sga_model.nameLike.agent+)
     | (sga_model.nameLike.agent+, sga_resp+)),
    sga_att.global.attributes,
    empty
  }
sga_resp =
  
  ## (responsibility) contains a phrase describing the nature of a person's intellectual responsibility.    
  element ns1:resp {
    sga_macro.phraseSeq.limited,
    sga_att.global.attributes,
    sga_att.canonical.attributes,
    empty
  }
sga_title =
  
  ## contains a title for any kind of work.   
  element ns1:title {
    sga_macro.paraContent,
    
    ## indicates the bibliographic level for a title, that is, whether
    ##                                         it identifies an article, book, journal, series, or
    ##                                         unpublished material.
    attribute level {
      
      ## (analytic) analytic title (article, poem, or other item
      ##                                                   published as part of a larger item) 
      "a"
      | 
        ## (monographic) monographic title (book, collection, or
        ##                                                   other item published as a distinct item,
        ##                                                   including single volumes of multi-volume
        ##                                                   works) 
        "m"
      | 
        ## (journal) journal title 
        "j"
      | 
        ## (series) series title 
        "s"
      | 
        ## (unpublished) title of unpublished material (including
        ##                                                   theses and dissertations unless
        ##                                                   published by a commercial press)
        "u"
    }?,
    
    ## classifies the title according to some convenient typology.
    ## Sample values include: 1] main; 2] sub(subordinate) ; 3] alt(alternate) ; 4] short; 5] desc(descriptive) 
    attribute type { sga_data.enumerated }?,
    sga_att.global.attributes,
    sga_att.canonical.attributes,
    empty
  }
sga_publisher =
  
  ## provides the name of the organization responsible for the publication or distribution of a
  ##         bibliographic item.  
  element ns1:publisher {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_biblScope =
  
  ## (scope of citation) defines the scope of a bibliographic reference, for example as a
  ##         list of page numbers, or a named subdivision of a larger work. 
  element ns1:biblScope {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    
    ## identifies the type of information conveyed by the element, e.g.
    ##                 columns, pages, volume.
    ## Suggested values include: 1] vol(volume) ; 2] issue; 3] pp(pages) ; 4] ll (lines) ; 5] chap(chapter) ; 6] part
    attribute type {
      
      ## (volume) the element contains a volume number.
      "vol"
      | 
        ## the element contains an issue number, or volume and
        ##                         issue numbers.
        "issue"
      | 
        ## (pages) the element contains a page number or page range.
        "pp"
      | 
        ##  (lines) the element contains a line number or line range.
        "ll"
      | 
        ## (chapter) the element contains a chapter indication (number
        ##                         and/or title)
        "chap"
      | 
        ## the element identifies a part of a book or collection.
        "part"
      | xsd:Name
    }?,
    
    ## specifies the starting point of the range of units indicated by the type attribute.
    attribute from { sga_data.word }?,
    
    ## specifies the end-point of the range of units indicated by the type attribute.
    attribute to { sga_data.word }?,
    empty
  }
sga_pubPlace =
  
  ## (publication place) contains the name of the place where a bibliographic item was published. 
  element ns1:pubPlace {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.naming.attributes,
    empty
  }
sga_bibl =
  
  ## (bibliographic citation) contains a loosely-structured bibliographic citation of which the sub-components may or may
  ##     not be explicitly tagged.    
  element ns1:bibl {
    (text
     | sga_model.gLike
     | sga_model.highlighted
     | sga_model.pPart.data
     | sga_model.pPart.edit
     | sga_model.segLike
     | sga_model.ptrLike
     | sga_model.biblPart
     | sga_model.global)*,
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    sga_att.typed.attributes,
    empty
  }
sga_relatedItem =
  
  ## contains or references some other bibliographic item which is related to the present one in
  ##     some specified manner, for example as a constituent or alternative version of it. 
  element ns1:relatedItem {
    ((sga_model.biblLike | sga_model.ptrLike)?)
    >> sch:pattern [
         id = "relatedItem-constraint-targetorcontent11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relatedItem"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and count( child::* ) > 0"
             "If the 'target' attribute is used, the\x{a}" ~
             "        relatedItem element must be empty"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "relatedItem-constraint-targetorcontent11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relatedItem"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@target or child::*"
             "A relatedItem element should have either a 'target' attribute\x{a}" ~
             "        or a child element to indicate the related bibliographic item"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    sga_att.global.attributes,
    sga_att.typed.attributes,
    
    ## points to the related bibliographic element by means of an
    ##       absolute or relative URI reference
    attribute target { sga_data.pointer }?,
    empty
  }
sga_l =
  
  ## (verse line) contains a single, possibly incomplete, line of verse.   
  element ns1:l {
    sga_macro.paraContent,
    sga_att.global.attributes,
    
    ## specifies whether or not the line is metrically complete. 
    [ a:defaultValue = "N" ]
    attribute part {
      
      ## (yes) the line is metrically incomplete
      "Y"
      | 
        ## (no) either the line is complete, or no claim is made as to its completeness
        "N"
      | 
        ## (initial) the initial part of an incomplete line
        "I"
      | 
        ## (medial) a medial part of an incomplete line
        "M"
      | 
        ## (final) the final part of an incomplete line
        "F"
    }?,
    empty
  }
sga_lg =
  
  ## (line group) contains a group of verse lines functioning as a formal unit, e.g. a stanza, refrain,
  ##         verse paragraph, etc.   
  element ns1:lg {
    ((sga_model.divTop | sga_model.global)*,
     (sga_model.lLike | sga_lg),
     (sga_model.lLike | sga_lg | sga_model.global)*,
     (sga_model.divBottom, sga_model.global*)*),
    sga_att.global.attributes,
    sga_att.divLike.attributes,
    sga_att.typed.attributes,
    sga_att.declaring.attributes,
    empty
  }
sga_sp =
  
  ## (speech) An individual speech in a performance text, or a passage presented as such in a prose or
  ##     verse text.   
  element ns1:sp {
    (sga_model.global*,
     (sga_speaker, sga_model.global*)?,
     ((sga_model.lLike
       | sga_lg
       | sga_model.pLike
       | sga_model.stageLike
       | sga_model.qLike),
      sga_model.global*)+),
    sga_att.global.attributes,
    sga_att.ascribed.attributes,
    empty
  }
sga_speaker =
  
  ## A specialized form of heading or label, giving the name of one or more speakers in a
  ##         dramatic text or fragment. 
  element ns1:speaker {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_stage =
  
  ## (stage direction) contains any kind of stage direction within a dramatic text or fragment.   
  element ns1:stage {
    sga_macro.specialPara,
    sga_att.global.attributes,
    
    ## indicates the kind of stage direction.
    ## Suggested values include: 1] setting; 2] entrance; 3] exit; 4] business; 5] novelistic; 6] delivery; 7] modifier; 8] location; 9] mixed
    attribute type {
      
      ## describes a setting.
      "setting"
      | 
        ## describes an entrance.
        "entrance"
      | 
        ## describes an exit.
        "exit"
      | 
        ## describes stage business.
        "business"
      | 
        ## is a narrative, motivating stage direction.
        "novelistic"
      | 
        ## describes how a character speaks.
        "delivery"
      | 
        ## gives some detail about a character.
        "modifier"
      | 
        ## describes a location.
        "location"
      | 
        ## more than one of the above
        "mixed"
      | xsd:Name
    }?,
    empty
  }
sga_divGen =
  
  ## (automatically generated text division) indicates the location at which a textual division generated
  ##         automatically by a text-processing application is to appear. 
  element ns1:divGen {
    sga_model.headLike*,
    sga_att.global.attributes,
    
    ## specifies what type of generated text division (e.g. index,
    ##                 table of contents, etc.) is to appear.
    ## Sample values include: 1] index; 2] toc; 3] figlist; 4] tablist
    attribute type { sga_data.enumerated }?,
    empty
  }
sga_teiHeader =
  
  ## (TEI Header) supplies the descriptive and declarative information making up an electronic title page
  ##     prefixed to every TEI-conformant text.  
  element ns1:teiHeader {
    sga_fileDesc,
    sga_encodingDesc,
    sga_profileDesc*,
    sga_revisionDesc,
    
    ## specifies the kind of document to which the header is attached, for example whether it
    ##         is a corpus or individual text.
    ## Sample values include: 1] text; 2] corpus
    [ a:defaultValue = "text" ] attribute type { sga_data.enumerated }?,
    sga_att.global.attributes,
    empty
  }
sga_fileDesc =
  
  ## (file description) contains a full bibliographic description of an electronic file.  
  element ns1:fileDesc {
    (sga_titleStmt,
     sga_editionStmt,
     sga_extent?,
     sga_publicationStmt,
     sga_seriesStmt),
    sga_sourceDesc+,
    sga_att.global.attributes,
    empty
  }
sga_titleStmt =
  
  ## (title statement) groups information about the title of a work and those responsible for its intellectual
  ##     content.  
  element ns1:titleStmt {
    (sga_title+, sga_model.respLike*), sga_att.global.attributes, empty
  }
sga_sponsor =
  
  ## specifies the name of a sponsoring organization or institution. 
  element ns1:sponsor {
    sga_macro.phraseSeq.limited, sga_att.global.attributes, empty
  }
sga_funder =
  
  ## (funding body) specifies the name of an individual, institution, or organization responsible for the
  ##     funding of a project or text. 
  element ns1:funder {
    sga_macro.phraseSeq.limited, sga_att.global.attributes, empty
  }
sga_principal =
  
  ## (principal researcher) supplies the name of the principal researcher responsible for the
  ## creation of an electronic text. 
  element ns1:principal {
    sga_macro.phraseSeq.limited, sga_att.global.attributes, empty
  }
sga_editionStmt =
  
  ## (edition statement) groups information relating to one edition of a text.  
  element ns1:editionStmt {
    (sga_model.pLike+ | (sga_edition, sga_respStmt*)),
    sga_att.global.attributes,
    empty
  }
sga_edition =
  
  ## (edition) describes the particularities of one edition of a text. 
  element ns1:edition {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_extent =
  
  ## describes the approximate size of a text as stored on some carrier medium, whether digital
  ##     or non-digital, specified in any convenient units.   
  element ns1:extent {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_publicationStmt =
  
  ## (publication statement) groups information concerning the publication or distribution of an electronic or other
  ##     text.   
  element ns1:publicationStmt {
    (sga_model.pLike+ | sga_model.publicationStmtPart+),
    sga_att.global.attributes,
    empty
  }
sga_distributor =
  
  ## supplies the name of a person or other agency responsible for the
  ## distribution of a text. 
  element ns1:distributor {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_authority =
  
  ## (release authority) supplies the name of a person or other agency responsible for
  ##   making an electronic file available, other than a publisher or
  ##   distributor. 
  element ns1:authority {
    sga_macro.phraseSeq.limited, sga_att.global.attributes, empty
  }
sga_idno =
  
  ## (identifier) supplies any form of identifier used to identify some object,
  ##   such as a bibliographic item, a person, a title, an organization,
  ##   etc. in a standardized way.   
  element ns1:idno {
    sga_macro.xtext,
    sga_att.global.attributes,
    
    ## categorizes the identifier, for example as an ISBN, Social
    ##       Security number, etc. 
    attribute type { sga_data.enumerated }?,
    empty
  }
sga_availability =
  
  ## supplies information about the availability of a text, for example any restrictions on its
  ##     use or distribution, its copyright status, etc. 
  element ns1:availability {
    sga_model.pLike+,
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    
    ## supplies a code identifying the current availability of the text. 
    [ a:defaultValue = "unknown" ]
    attribute status {
      
      ## the text is freely available. 
      "free"
      | 
        ## the status of the text is unknown. 
        "unknown"
      | 
        ## the text is not freely available. 
        "restricted"
    }?,
    empty
  }
sga_seriesStmt =
  
  ## (series statement) groups information about the series, if any, to which a publication belongs.  
  element ns1:seriesStmt {
    (sga_title+, (sga_editor | sga_respStmt)*, sga_idno*),
    sga_att.global.attributes,
    empty
  }
sga_sourceDesc =
  
  ## (source description) describes the source from which an electronic text was derived or generated, typically a
  ##     bibliographic description in the case of a digitized text, or a phrase such as "born digital"
  ##     for a text which has no previous existence. 
  element ns1:sourceDesc {
    (sga_model.pLike+
     | (sga_model.biblLike
        | sga_model.sourceDescPart
        | sga_model.listLike)+),
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    empty
  }
sga_encodingDesc =
  
  ## (encoding description) documents the relationship between an electronic text and the
  ## source or sources from which it was derived.  
  element ns1:encodingDesc {
    sga_model.pLike+, sga_att.global.attributes, empty
  }
sga_projectDesc =
  
  ## (project description) describes in detail the aim or purpose for which an electronic file was encoded, together
  ##     with any other relevant information concerning the process by which it was assembled or
  ##     collected.   
  element ns1:projectDesc {
    sga_model.pLike+,
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    empty
  }
sga_editorialDecl =
  
  ## (editorial practice declaration) provides details of editorial principles and practices applied
  ## during the encoding of a text.   
  element ns1:editorialDecl {
    (sga_model.pLike | sga_model.editorialDeclPart)+,
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    empty
  }
sga_correction =
  
  ## (correction principles) states how and under what circumstances corrections have been made in the text.  
  element ns1:correction {
    sga_model.pLike+,
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    
    ## indicates the degree of correction applied to the text. 
    [ a:defaultValue = "unknown" ]
    attribute status {
      
      ## the text has been thoroughly checked and proofread. 
      "high"
      | 
        ## the text has been checked at least once. 
        "medium"
      | 
        ## the text has not been checked. 
        "low"
      | 
        ## the correction status of the text is unknown. 
        "unknown"
    }?,
    
    ## indicates the method adopted to indicate corrections within the text. 
    [ a:defaultValue = "silent" ]
    attribute method {
      
      ## corrections have been made silently 
      "silent"
      | 
        ## corrections have been represented using markup
        "markup"
    }?,
    empty
  }
sga_normalization =
  
  ## indicates the extent of normalization or regularization of the original source carried out
  ##     in converting it to electronic form.  
  element ns1:normalization {
    sga_model.pLike+,
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    
    ## indicates the authority for any normalization carried out. 
    attribute source { sga_data.pointer }?,
    
    ## indicates the method adopted to indicate normalizations within the text. 
    [ a:defaultValue = "silent" ]
    attribute method {
      
      ## normalization made silently 
      "silent"
      | 
        ## normalization represented using markup 
        "markup"
    }?,
    empty
  }
sga_quotation =
  
  ## specifies editorial practice adopted with respect to quotation marks in the original.   
  element ns1:quotation {
    sga_model.pLike+,
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    
    ## (quotation marks) indicates whether or not quotation marks have been retained as content within the text. 
    [ a:defaultValue = "all" ]
    attribute marks {
      
      ## no quotation marks have been retained 
      "none"
      | 
        ## some quotation marks have been retained 
        "some"
      | 
        ## all quotation marks have been retained 
        "all"
    }?,
    
    ## specifies how quotation marks are indicated within the text.
    [ a:defaultValue = "unknown" ] attribute form { text }?,
    empty
  }
sga_hyphenation =
  
  ## summarizes the way in which hyphenation in a source text has been treated in an encoded
  ##     version of it.  
  element ns1:hyphenation {
    sga_model.pLike+,
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    
    ## (end-of-line) indicates whether or not end-of-line hyphenation has been retained in a text.
    [ a:defaultValue = "some" ]
    attribute eol {
      
      ## all end-of-line hyphenation has been retained, even though the lineation of the
      ##             original may not have been. 
      "all"
      | 
        ## end-of-line hyphenation has been retained in some cases. 
        "some"
      | 
        ## all soft end-of-line hyphenation has been removed: any remaining end-od-line
        ##             hyphenation should be retained. 
        "hard"
      | 
        ## all end-of-line hyphenation has been removed: any remaining hyphenation occurred
        ##             within the line. 
        "none"
    }?,
    empty
  }
sga_segmentation =
  
  ## describes the principles according to which the text has been segmented, for example into
  ##     sentences, tone-units, graphemic strata, etc.  
  element ns1:segmentation {
    sga_model.pLike+,
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    empty
  }
sga_interpretation =
  
  ## describes the scope of any analytic or interpretive information added to the text in
  ##     addition to the transcription.  
  element ns1:interpretation {
    sga_model.pLike+,
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    empty
  }
sga_tagsDecl =
  
  ## (tagging declaration) provides detailed information about the tagging applied to a document.  
  element ns1:tagsDecl {
    (sga_rendition*, sga_namespace*), sga_att.global.attributes, empty
  }
sga_tagUsage =
  
  ## supplies information about the usage of a specific element within a text.  
  element ns1:tagUsage {
    sga_macro.limitedContent,
    sga_att.global.attributes,
    
    ## (element name) the name (generic identifier) of the element indicated by the tag.
    attribute gi { sga_data.name },
    
    ## specifies the number of occurrences of this element within the text.
    attribute occurs { sga_data.count }?,
    
    ## (with unique identifier) specifies the number of occurrences of this element within the text which bear a
    ##         distinct value for the global xml:id attribute. 
    attribute withId { sga_data.count }?,
    
    ## specifies the identifier of a rendition element which defines how this element
    ##         is to be rendered.
    attribute render { sga_data.pointer }?,
    empty
  }
sga_namespace =
  
  ## supplies the formal name of the namespace to which the elements documented by its children
  ##     belong.  
  element ns1:namespace {
    sga_tagUsage+,
    sga_att.global.attributes,
    
    ## the full formal name of the namespace concerned.
    attribute name { sga_data.namespace },
    empty
  }
sga_rendition =
  
  ## supplies information about the rendition or appearance of one or more elements in the source
  ##     text. 
  element ns1:rendition {
    sga_macro.limitedContent,
    sga_att.global.attributes,
    
    ## identifies the language used to describe the rendition.
    attribute scheme {
      
      ## Cascading Stylesheet Language
      "css"
      | 
        ## Extensible Stylesheet Language Formatting Objects
        "xslfo"
      | 
        ## Informal free text description
        "free"
      | 
        ## A user-defined rendition description language
        "other"
    }?,
    
    ## where CSS is used, provides a way of defining
    ## pseudo-elements, that is, styling rules
    ## applicable to specific sub-portions of an element.
    attribute scope { text }?,
    empty
  }
sga_refsDecl =
  
  ## (references declaration) specifies how canonical references are constructed for this
  ##   text.   
  element ns1:refsDecl {
    (sga_model.pLike+ | sga_cRefPattern+ | sga_refState+),
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    empty
  }
sga_cRefPattern =
  
  ## (canonical reference pattern) specifies an expression and replacement pattern for transforming a canonical reference into
  ##     a URI.    
  element ns1:cRefPattern {
    sga_model.pLike*,
    sga_att.global.attributes,
    
    ## specifies a regular expression against which the values of cRef attributes
    ##         can be matched.
    attribute matchPattern { sga_data.pattern },
    
    ## specifies a replacement pattern which, once subpattern substitution
    ##         has been performed, provides a URI.
    attribute replacementPattern { text },
    empty
  }
sga_refState =
  
  ## (reference state) specifies one component of a canonical reference defined by the milestone method.  
  element ns1:refState {
    empty,
    sga_att.global.attributes,
    sga_att.sourced.attributes,
    
    ## indicates what kind of state is changing at this milestone.
    ## Suggested values include: 1] page; 2] column; 3] line; 4] book; 5] poem; 6] canto; 7] stanza; 8] act; 9] scene; 10] section; 11] absent
    attribute unit {
      
      ## page breaks in the reference edition. 
      "page"
      | 
        ## column breaks. 
        "column"
      | 
        ## line breaks. 
        "line"
      | 
        ## any units termed book, liber, etc. 
        "book"
      | 
        ## individual poems in a collection. 
        "poem"
      | 
        ## cantos or other major sections of a poem. 
        "canto"
      | 
        ## stanzas within a poem, book, or canto. 
        "stanza"
      | 
        ## acts within a play. 
        "act"
      | 
        ## scenes within a play or act. 
        "scene"
      | 
        ## sections of any kind. 
        "section"
      | 
        ## passages not present in the reference edition.
        "absent"
      | xsd:Name
    },
    
    ## specifies the fixed length of the reference component.
    attribute length { sga_data.count }?,
    
    ## (delimiter) supplies a delimiting string following the reference component.
    attribute delim { text }?,
    empty
  }
sga_classDecl =
  
  ## (classification declarations) contains one or more taxonomies defining any classificatory
  ## codes used elsewhere in the text.  
  element ns1:classDecl {
    sga_taxonomy+, sga_att.global.attributes, empty
  }
sga_taxonomy =
  
  ## defines a typology used to classify texts either implicitly, by means of a bibliographic
  ##     citation, or explicitly by a structured taxonomy. 
  element ns1:taxonomy {
    (sga_model.glossLike*
     | sga_category+
     | (sga_model.biblLike, sga_category*)),
    sga_att.global.attributes,
    empty
  }
sga_category =
  
  ## contains an individual descriptive category, possibly nested within a superordinate
  ##     category, within a user-defined taxonomy. 
  element ns1:category {
    ((sga_catDesc+ | sga_model.glossLike*), sga_category*),
    sga_att.global.attributes,
    empty
  }
sga_catDesc =
  
  ## (category description) describes some category within a taxonomy or text typology, either in the form of a brief
  ##     prose description or in terms of the situational parameters used by the TEI formal textDesc. 
  element ns1:catDesc {
    (text | sga_model.limitedPhrase | sga_model.catDescPart)*,
    sga_att.global.attributes,
    empty
  }
sga_appInfo =
  
  ## (application information) records information about an application which has
  ##   edited the TEI file. 
  element ns1:appInfo {
    sga_model.applicationLike+, sga_att.global.attributes, empty
  }
sga_application =
  
  ## provides information about an application which has acted upon the document.
  element ns1:application {
    (sga_model.labelLike+, (sga_model.ptrLike* | sga_model.pLike*)),
    sga_att.global.attributes,
    sga_att.typed.attributes,
    sga_att.datable.attributes,
    
    ## Supplies an identifier for the application, independent of its version number or display
    ##         name.
    attribute ident { sga_data.name },
    
    ## Supplies a version number for the application, independent of its identifier or display
    ##         name.
    attribute version {
      xsd:token {
        pattern = "[\d]+[a-z]*[\d]*(\.[\d]+[a-z]*[\d]*){0,3}"
      }
    },
    empty
  }
sga_profileDesc =
  
  ## (text-profile description) provides a detailed description of non-bibliographic aspects of a text, specifically the
  ##     languages and sublanguages used, the situation in which it was produced, the participants and
  ##     their setting.  
  element ns1:profileDesc {
    sga_model.profileDescPart*, sga_att.global.attributes, empty
  }
sga_creation =
  
  ## contains information about the creation of a text.  
  element ns1:creation {
    sga_macro.phraseSeq.limited, sga_att.global.attributes, empty
  }
sga_langUsage =
  
  ## (language usage) describes the languages, sublanguages, registers, dialects, etc.
  ## represented within a text.   
  element ns1:langUsage {
    sga_language+,
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    empty
  }
sga_language =
  
  ## characterizes a single language or sublanguage used within a text. 
  element ns1:language {
    sga_macro.phraseSeq.limited,
    sga_att.global.attributes,
    
    ## (identifier) Supplies a language code constructed as defined in BCP 47 which is used to identify the
    ##         language documented by this element, and which is referenced by the global
    ##         xml:lang attribute.
    attribute ident { sga_data.language },
    
    ## specifies the approximate percentage (by volume) of the text which uses this language. 
    attribute usage {
      xsd:nonNegativeInteger { maxInclusive = "100" }
    }?,
    empty
  }
sga_textClass =
  
  ## (text classification) groups information which describes the nature or topic of a text in terms of a standard
  ##     classification scheme, thesaurus, etc. 
  element ns1:textClass {
    (sga_classCode | sga_catRef | sga_keywords)*,
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    empty
  }
sga_keywords =
  
  ## contains a list of keywords or phrases identifying the topic or nature of a text. 
  element ns1:keywords {
    (sga_term+ | sga_list),
    sga_att.global.attributes,
    
    ## identifies the controlled vocabulary within which the set of keywords concerned is
    ##         defined. 
    attribute scheme { sga_data.pointer },
    empty
  }
sga_classCode =
  
  ## (classification code) contains the classification code used for this text in some standard classification system. 
  element ns1:classCode {
    sga_macro.phraseSeq.limited,
    sga_att.global.attributes,
    
    ## identifies the classification system or taxonomy in use.
    attribute scheme { sga_data.pointer },
    empty
  }
sga_catRef =
  
  ## (category reference) specifies one or more defined categories within some taxonomy or text typology. 
  element ns1:catRef {
    empty,
    sga_att.global.attributes,
    sga_att.pointing.attributes,
    
    ## identifies the classification scheme within which the set of categories concerned is
    ##         defined 
    attribute scheme { sga_data.pointer }?,
    empty
  }
sga_revisionDesc =
  
  ## (revision description) summarizes the revision history for a file.  
  element ns1:revisionDesc {
    (sga_list | sga_change+),
    sga_att.global.attributes,
    sga_att.docStatus.attributes,
    empty
  }
sga_change =
  
  ## summarizes a particular change or correction made to a particular version of an electronic
  ##     text which is shared between several researchers. 
  element ns1:change {
    (text
     | sga_model.limitedPhrase
     | sga_model.inter
     | sga_model.global)*,
    sga_att.global.attributes,
    sga_att.ascribed.attributes,
    sga_att.datable.attributes,
    sga_att.docStatus.attributes,
    empty
  }
sga_geoDecl =
  
  ## (geographic coordinates declaration) documents the notation and the datum used for geographic coordinates expressed as content of
  ##     the geo element elsewhere within the document.
  element ns1:geoDecl {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.declarable.attributes,
    
    ## supplies a commonly used code name for the datum employed.
    ## Suggested values include: 1] WGS84(World Geodetic System) ; 2] MGRS(Military Grid Reference System) ; 3] OSGB36(ordnance survey great britain) ; 4] ED50(European Datum coordinate system) 
    [ a:defaultValue = "WGS84" ]
    attribute datum {
      
      ## (World Geodetic System) a pair of numbers to be interpreted as latitude followed by longitude according to
      ##             the World Geodetic System.
      "WGS84"
      | 
        ## (Military Grid Reference System) the values supplied are geospatial entity object codes, based on
        "MGRS"
      | 
        ## (ordnance survey great britain) the value supplied is to be interpreted as a British National Grid Reference.
        "OSGB36"
      | 
        ## (European Datum coordinate system) the value supplied is to be interpreted as latitude followed by longitude according
        ##             to the European Datum coordinate system.
        "ED50"
      | xsd:Name
    }?,
    empty
  }
sga_TEI =
  
  ## (TEI document) contains a single TEI-conformant document,
  ## comprising a TEI header and a text, either in isolation or as part of a
  ## teiCorpus element.  
  element ns1:TEI {
    (sga_teiHeader,
     ((sga_model.resourceLike+, sga_text?) | sga_text))
    >> sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
    >> sch:ns [
         prefix = "rng"
         uri = "http://relaxng.org/ns/structure/1.0"
       ],
    sga_att.global.attributes,
    
    ## specifies the version number of the TEI Guidelines against
    ##       which this document is valid.
    attribute version { sga_data.version }?,
    empty
  }
sga_text =
  
  ## contains a single text of any kind, whether unitary or composite, for example a poem or
  ##     drama, a collection of essays, a novel, a dictionary, or a corpus sample.  
  element ns1:text {
    (sga_model.global*,
     (sga_front, sga_model.global*)?,
     (sga_body | sga_group),
     sga_model.global*,
     (sga_back, sga_model.global*)?),
    sga_att.global.attributes,
    sga_att.declaring.attributes,
    sga_att.typed.attributes,
    empty
  }
sga_body =
  
  ## (text body) contains the whole body of a single unitary text, excluding any front or back matter. 
  element ns1:body {
    (sga_model.global*,
     (sga_model.divTop, (sga_model.global | sga_model.divTop)*)?,
     sga_model.global*,
     ((sga_model.divLike, sga_model.global*)+
      | sga_model.global*
      | ((sga_model.common, sga_model.global*)+,
         ((sga_model.divLike, sga_model.global*)+
          | sga_model.global*)?)),
     (sga_model.divBottom, sga_model.global*)*),
    sga_att.global.attributes,
    sga_att.declaring.attributes,
    empty
  }
sga_group =
  
  ## contains the body of a composite text, grouping together a sequence of distinct texts (or
  ##     groups of such texts) which are regarded as a unit for some purpose, for example the collected
  ##     works of an author, a sequence of prose essays, etc.   
  element ns1:group {
    ((sga_model.divTop | sga_model.global)*,
     ((sga_text | sga_group),
      (sga_text | sga_group | sga_model.global)*),
     sga_model.divBottom*),
    sga_att.global.attributes,
    sga_att.declaring.attributes,
    empty
  }
sga_floatingText =
  
  ## contains a single text of any kind, whether unitary or composite, which interrupts the text
  ##     containing it at any point and after which the surrounding text resumes. 
  element ns1:floatingText {
    (sga_model.global*,
     (sga_front, sga_model.global*)?,
     (sga_body | sga_group),
     sga_model.global*,
     (sga_back, sga_model.global*)?),
    sga_att.global.attributes,
    sga_att.declaring.attributes,
    sga_att.typed.attributes,
    empty
  }
sga_div =
  
  ## (text division) contains a subdivision of the front, body, or back of a text. 
  element ns1:div {
    ((sga_model.divTop | sga_model.global)*,
     (((sga_model.divLike, sga_model.global*)+
       | ((sga_model.common, sga_model.global*)+,
          (sga_model.divLike, sga_model.global*)*)),
      (sga_model.divBottom, sga_model.global*)*)?),
    sga_att.global.attributes,
    sga_att.divLike.attributes,
    sga_att.typed.attributes,
    sga_att.declaring.attributes,
    empty
  }
sga_trailer =
  
  ## contains a closing title or footer appearing at the end of a division of a text.   
  element ns1:trailer {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_byline =
  
  ## contains the primary statement of responsibility given for a work
  ## on its title page or at the head or end of the work.  
  element ns1:byline {
    (text
     | sga_model.gLike
     | sga_model.phrase
     | sga_docAuthor
     | sga_model.global)*,
    sga_att.global.attributes,
    empty
  }
sga_dateline =
  
  ## contains a brief description of the place, date, time, etc. of production of a letter,
  ##     newspaper story, or other work, prefixed or suffixed to it as a kind of heading or trailer.   
  element ns1:dateline {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_argument =
  
  ## A formal list or prose description of the topics addressed by
  ##	a subdivision of a text.  
  element ns1:argument {
    ((sga_model.global | sga_model.headLike)*,
     (sga_model.common, sga_model.global*)+),
    sga_att.global.attributes,
    empty
  }
sga_epigraph =
  
  ## contains a quotation, anonymous or attributed, appearing at the start of a section or
  ##     chapter, or on a title page.    
  element ns1:epigraph {
    (sga_model.common | sga_model.global)*,
    sga_att.global.attributes,
    empty
  }
sga_opener =
  
  ## groups together dateline, byline, salutation, and similar phrases appearing as a preliminary
  ##     group at the start of a division, especially of a letter.  
  element ns1:opener {
    (text
     | sga_model.gLike
     | sga_model.phrase
     | sga_argument
     | sga_byline
     | sga_dateline
     | sga_epigraph
     | sga_salute
     | sga_signed
     | sga_model.global)*,
    sga_att.global.attributes,
    empty
  }
sga_closer =
  
  ## groups together salutations, datelines, and similar phrases appearing as a final group at
  ##     the end of a division, especially of a letter.  
  element ns1:closer {
    (text
     | sga_model.gLike
     | sga_signed
     | sga_dateline
     | sga_salute
     | sga_model.phrase
     | sga_model.global)*,
    sga_att.global.attributes,
    empty
  }
sga_salute =
  
  ## (salutation) contains a salutation or greeting prefixed to a foreword, dedicatory epistle, or other
  ##     division of a text, or the salutation in the closing of a letter, preface, etc.  
  element ns1:salute {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_signed =
  
  ## (signature) contains the closing salutation, etc., appended to a foreword,
  ## dedicatory epistle, or other division of a text.   
  element ns1:signed {
    sga_macro.phraseSeq, sga_att.global.attributes, empty
  }
sga_postscript =
  
  ## contains a postscript, e.g. to a letter. 
  element ns1:postscript {
    (sga_model.common | sga_model.global)*,
    sga_att.global.attributes,
    empty
  }
sga_titlePage =
  
  ## (title page) contains the title page of a text, appearing within the front or back matter.  
  element ns1:titlePage {
    (sga_model.global*,
     sga_model.titlepagePart,
     (sga_model.titlepagePart | sga_model.global)*),
    sga_att.global.attributes,
    
    ## classifies the title page according to any convenient typology.
    attribute type { sga_data.enumerated }?,
    empty
  }
sga_docTitle =
  
  ## (document title) contains the title of a document, including all its
  ## constituents, as given on a title page. 
  element ns1:docTitle {
    (sga_model.global*, (sga_titlePart, sga_model.global*)+),
    sga_att.global.attributes,
    sga_att.canonical.attributes,
    empty
  }
sga_titlePart =
  
  ## contains a subsection or division of the title of a work, as
  ## indicated on a title page. 
  element ns1:titlePart {
    sga_macro.paraContent,
    sga_att.global.attributes,
    
    ## specifies the role of this subdivision of the title.
    ## Suggested values include: 1] main; 2] sub(subordinate) ; 3] alt(alternate) ; 4] short; 5] desc(descriptive) 
    [ a:defaultValue = "main" ]
    attribute type {
      
      ## main title of the work
      ##         
      "main"
      | 
        ## (subordinate) subtitle  of the work
        ##         
        "sub"
      | 
        ## (alternate) alternative title  of the work
        ##         
        "alt"
      | 
        ## abbreviated form of title
        "short"
      | 
        ## (descriptive) descriptive paraphrase of the work 
        ##    
        "desc"
      | xsd:Name
    }?,
    empty
  }
sga_docAuthor =
  
  ## (document author) contains the name of the author of the document, as given on the
  ## title page (often but not always contained in a byline). 
  element ns1:docAuthor {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.canonical.attributes,
    empty
  }
sga_imprimatur =
  
  ## contains a formal statement authorizing the publication of a work, sometimes required to
  ##     appear on a title page or its verso. 
  element ns1:imprimatur {
    sga_macro.paraContent, sga_att.global.attributes, empty
  }
sga_docEdition =
  
  ## (document edition) contains an edition statement as presented on a title page of a
  ## document. 
  element ns1:docEdition {
    sga_macro.paraContent, sga_att.global.attributes, empty
  }
sga_docImprint =
  
  ## (document imprint) contains the imprint statement (place and date of publication,
  ## publisher name), as given
  ## (usually) at the foot of a title page. 
  element ns1:docImprint {
    (text
     | sga_model.gLike
     | sga_model.phrase
     | sga_pubPlace
     | sga_docDate
     | sga_publisher
     | sga_model.global)*,
    sga_att.global.attributes,
    empty
  }
sga_docDate =
  
  ## (document date) contains the date of a document, as given
  ## (usually) on a title page. 
  element ns1:docDate {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    
    ## gives the value of the date in standard form, i.e. YYYY-MM-DD.
    attribute when { sga_data.temporal.w3c }?,
    empty
  }
sga_front =
  
  ## (front matter) contains any prefatory matter (headers,
  ## title page, prefaces, dedications, etc.)
  ## found  at the start of a document, before the main body.  
  element ns1:front {
    ((sga_model.frontPart | sga_model.pLike.front | sga_model.global)*,
     ((sga_model.frontPart | sga_model.global)*
      | (sga_model.divLike,
         (sga_model.frontPart
          | sga_model.divLike
          | sga_model.global)*))?,
     (sga_model.divBottomPart,
      (sga_model.divBottomPart | sga_model.global)*)?),
    sga_att.global.attributes,
    sga_att.declaring.attributes,
    empty
  }
sga_back =
  
  ## (back matter) contains any appendixes, etc. following the main part of a text.  
  element ns1:back {
    ((sga_model.frontPart | sga_model.pLike.front | sga_model.global)*,
     ((sga_model.frontPart | sga_model.global)*
      | (sga_model.divLike,
         (sga_model.frontPart
          | sga_model.divLike
          | sga_model.global)*))?,
     (sga_model.divBottomPart,
      (sga_model.divBottomPart | sga_model.global)*)?),
    sga_att.global.attributes,
    sga_att.declaring.attributes,
    empty
  }
sga_space =
  
  ## indicates the location of a significant space in the copy text. 
  element ns1:space {
    sga_model.glossLike*,
    sga_att.global.attributes,
    sga_att.dimensions.attributes,
    
    ## (dimension) indicates whether the space is horizontal or vertical.
    attribute dim {
      
      ## the space is horizontal.
      "horizontal"
      | 
        ## the space is vertical.
        "vertical"
    }?,
    
    ## (responsible party) indicates the individual responsible for identifying and measuring
    ## the space.
    attribute resp { sga_data.pointer }?,
    empty
  }
sga_persName =
  
  ## (personal name) contains a proper noun or proper-noun phrase referring to a person, possibly including any
  ##     or all of the person's forenames, surnames, honorifics, added names, etc. 
  element ns1:persName {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.datable.attributes,
    sga_att.editLike.attributes,
    sga_att.personal.attributes,
    sga_att.typed.attributes,
    empty
  }
sga_placeName =
  
  ## contains an absolute or relative place name.  
  element ns1:placeName {
    sga_macro.phraseSeq,
    sga_att.global.attributes,
    sga_att.naming.attributes,
    sga_att.typed.attributes,
    sga_att.datable.attributes,
    sga_att.editLike.attributes,
    empty
  }
start = sga_TEI
